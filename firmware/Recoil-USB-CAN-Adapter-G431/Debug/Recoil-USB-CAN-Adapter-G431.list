
Recoil-USB-CAN-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e84  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f0  0800a0f0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f0  0800a0f0  0001a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0f8  0800a0f8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d28  20000184  0800a284  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  0800a284  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193ed  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3c  00000000  00000000  000395e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  0003d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db2  00000000  00000000  0003e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e34  00000000  00000000  0003f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187e8  00000000  00000000  0005ff26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c074f  00000000  00000000  0007870e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049f4  00000000  00000000  00138e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0013d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a044 	.word	0x0800a044

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a044 	.word	0x0800a044

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_FDCAN_RxFifo0Callback>:
CAN_Frame can_tx_frame;

uint8_t usb_evt_happened;
uint8_t can_evt_happened;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  APP_handleCANMessage();
 800051e:	f000 f85d 	bl	80005dc <APP_handleCANMessage>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <APP_handleUSBMessage>:
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
    HAL_Delay(100);
  }
}

void APP_handleUSBMessage() {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  // check if the first byte is the correct Start of Frame
  uint8_t is_valid_frame = usb_rx_buffer[0] == 0xAAU;
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <APP_handleUSBMessage+0xa0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2baa      	cmp	r3, #170	; 0xaa
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	717b      	strb	r3, [r7, #5]
  if (!is_valid_frame) {
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d106      	bne.n	8000556 <APP_handleUSBMessage+0x2a>
    // if not, discard and continue receiving
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 fe14 	bl	800217c <HAL_GPIO_WritePin>
    return;
 8000554:	e037      	b.n	80005c6 <APP_handleUSBMessage+0x9a>
  }

  // decode the header section
  can_tx_frame.id_type = CAN_ID_STANDARD;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 8000558:	2200      	movs	r2, #0
 800055a:	711a      	strb	r2, [r3, #4]
  can_tx_frame.frame_type = CAN_FRAME_DATA;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 800055e:	2201      	movs	r2, #1
 8000560:	715a      	strb	r2, [r3, #5]
//  uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//      | (uart_rx_buffer[2] << 8U)
//      | (uart_rx_buffer[3] << 16U)
//      | (uart_rx_buffer[4] << 24U));
  can_tx_frame.size = usb_rx_buffer[5];
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <APP_handleUSBMessage+0xa0>)
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 800056a:	80da      	strh	r2, [r3, #6]
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <APP_handleUSBMessage+0xa0>)
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	461a      	mov	r2, r3
                   | ((uint32_t)usb_rx_buffer[7] << 8U)
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <APP_handleUSBMessage+0xa0>)
 8000574:	79db      	ldrb	r3, [r3, #7]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[8] << 16U)
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <APP_handleUSBMessage+0xa0>)
 800057c:	7a1b      	ldrb	r3, [r3, #8]
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[9] << 24U));
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <APP_handleUSBMessage+0xa0>)
 8000584:	7a5b      	ldrb	r3, [r3, #9]
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	4313      	orrs	r3, r2
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 800058c:	6013      	str	r3, [r2, #0]


  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 800058e:	2300      	movs	r3, #0
 8000590:	80fb      	strh	r3, [r7, #6]
 8000592:	e00c      	b.n	80005ae <APP_handleUSBMessage+0x82>
    can_tx_frame.data[i] = usb_rx_buffer[10+i];
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	f103 020a 	add.w	r2, r3, #10
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	490b      	ldr	r1, [pc, #44]	; (80005cc <APP_handleUSBMessage+0xa0>)
 800059e:	5c89      	ldrb	r1, [r1, r2]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 80005a2:	4413      	add	r3, r2
 80005a4:	460a      	mov	r2, r1
 80005a6:	721a      	strb	r2, [r3, #8]
  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	3301      	adds	r3, #1
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 80005b0:	88db      	ldrh	r3, [r3, #6]
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3ed      	bcc.n	8000594 <APP_handleUSBMessage+0x68>
  // does not really need this piece of code
//  if (!HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
//    uint32_t fifo_idx = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
//    HAL_FDCAN_AbortTxRequest(&hfdcan1, fifo_idx);
//  }
  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 80005b8:	4905      	ldr	r1, [pc, #20]	; (80005d0 <APP_handleUSBMessage+0xa4>)
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <APP_handleUSBMessage+0xa8>)
 80005bc:	f000 f95a 	bl	8000874 <CAN_putTxFrame>
  usb_evt_happened = 1;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <APP_handleUSBMessage+0xac>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
}
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001a4 	.word	0x200001a4
 80005d0:	200002b8 	.word	0x200002b8
 80005d4:	200002cc 	.word	0x200002cc
 80005d8:	200002c8 	.word	0x200002c8

080005dc <APP_handleCANMessage>:

void APP_handleCANMessage() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  CAN_getRxFrame(&hfdcan1, &can_rx_frame);
 80005e2:	4931      	ldr	r1, [pc, #196]	; (80006a8 <APP_handleCANMessage+0xcc>)
 80005e4:	4831      	ldr	r0, [pc, #196]	; (80006ac <APP_handleCANMessage+0xd0>)
 80005e6:	f000 f8c7 	bl	8000778 <CAN_getRxFrame>

  // prepare the USB frame
  usb_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <APP_handleCANMessage+0xd4>)
 80005ec:	22aa      	movs	r2, #170	; 0xaa
 80005ee:	701a      	strb	r2, [r3, #0]

  usb_tx_buffer[1] = 0x00U;  // Timestamp
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <APP_handleCANMessage+0xd4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
  usb_tx_buffer[2] = 0x00U;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <APP_handleCANMessage+0xd4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]
  usb_tx_buffer[3] = 0x00U;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <APP_handleCANMessage+0xd4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
  usb_tx_buffer[4] = 0x00U;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]

  usb_tx_buffer[5] = can_rx_frame.size;  // DLC
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <APP_handleCANMessage+0xcc>)
 800060a:	88db      	ldrh	r3, [r3, #6]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000610:	715a      	strb	r2, [r3, #5]

  usb_tx_buffer[6] = READ_BITS(can_rx_frame.id, 0xFFU);  // ID
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <APP_handleCANMessage+0xcc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <APP_handleCANMessage+0xd4>)
 800061a:	719a      	strb	r2, [r3, #6]
  usb_tx_buffer[7] = READ_BITS(can_rx_frame.id >> 8U, 0xFFU);
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <APP_handleCANMessage+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000626:	71da      	strb	r2, [r3, #7]
  usb_tx_buffer[8] = READ_BITS(can_rx_frame.id >> 16U, 0xFFU);
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <APP_handleCANMessage+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	0c1b      	lsrs	r3, r3, #16
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000632:	721a      	strb	r2, [r3, #8]
  usb_tx_buffer[9] = READ_BITS(can_rx_frame.id >> 24U, 0xFFU);
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <APP_handleCANMessage+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	0e1b      	lsrs	r3, r3, #24
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <APP_handleCANMessage+0xd4>)
 800063e:	725a      	strb	r2, [r3, #9]

  usb_tx_size = 10;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <APP_handleCANMessage+0xd8>)
 8000642:	220a      	movs	r2, #10
 8000644:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 8000646:	2300      	movs	r3, #0
 8000648:	80fb      	strh	r3, [r7, #6]
 800064a:	e00a      	b.n	8000662 <APP_handleCANMessage+0x86>
    usb_tx_buffer[10+i] = can_rx_frame.data[i];
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	330a      	adds	r3, #10
 8000652:	4915      	ldr	r1, [pc, #84]	; (80006a8 <APP_handleCANMessage+0xcc>)
 8000654:	440a      	add	r2, r1
 8000656:	7a11      	ldrb	r1, [r2, #8]
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <APP_handleCANMessage+0xd4>)
 800065a:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	3301      	adds	r3, #1
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <APP_handleCANMessage+0xcc>)
 8000664:	88db      	ldrh	r3, [r3, #6]
 8000666:	88fa      	ldrh	r2, [r7, #6]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ef      	bcc.n	800064c <APP_handleCANMessage+0x70>
  }
  usb_tx_size += can_rx_frame.size + 1;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <APP_handleCANMessage+0xcc>)
 800066e:	88da      	ldrh	r2, [r3, #6]
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <APP_handleCANMessage+0xd8>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	b29b      	uxth	r3, r3
 8000678:	3301      	adds	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <APP_handleCANMessage+0xd8>)
 800067e:	801a      	strh	r2, [r3, #0]

  usb_tx_buffer[10+can_rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <APP_handleCANMessage+0xcc>)
 8000682:	88db      	ldrh	r3, [r3, #6]
 8000684:	330a      	adds	r3, #10
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000688:	21bb      	movs	r1, #187	; 0xbb
 800068a:	54d1      	strb	r1, [r2, r3]

  CDC_Transmit_FS(usb_tx_buffer, usb_tx_size);
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <APP_handleCANMessage+0xd8>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <APP_handleCANMessage+0xd4>)
 8000694:	f009 f84e 	bl	8009734 <CDC_Transmit_FS>
  can_evt_happened = 1;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <APP_handleCANMessage+0xdc>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200002a8 	.word	0x200002a8
 80006ac:	200002cc 	.word	0x200002cc
 80006b0:	20000228 	.word	0x20000228
 80006b4:	20000224 	.word	0x20000224
 80006b8:	200002c9 	.word	0x200002c9

080006bc <APP_init>:

void APP_init() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  usb_evt_happened = 0;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <APP_init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  can_evt_happened = 0;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <APP_init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <APP_init+0x54>)
 80006ec:	f000 feca 	bl	8001484 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <APP_init+0x54>)
 80006f2:	f000 ff21 	bl	8001538 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <APP_init+0x54>)
 80006fc:	f001 f862 	bl	80017c4 <HAL_FDCAN_ActivateNotification>
}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200002c8 	.word	0x200002c8
 800070c:	200002c9 	.word	0x200002c9
 8000710:	200002cc 	.word	0x200002cc

08000714 <APP_main>:

void APP_main() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  // status light logic is handled in the main loop, because we need some
  // delay to make LED lights brighter
  if (usb_evt_happened) {
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <APP_main+0x5c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d008      	beq.n	8000732 <APP_main+0x1e>
    usb_evt_happened = 0;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <APP_main+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f001 fd25 	bl	800217c <HAL_GPIO_WritePin>
  }
  if (can_evt_happened) {
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <APP_main+0x60>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <APP_main+0x38>
    can_evt_happened = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <APP_main+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f001 fd18 	bl	800217c <HAL_GPIO_WritePin>
  }

  // this value controls the "brightness" and granularity of the LED for each activity
  HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fc0d 	bl	8000f6c <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f001 fd0f 	bl	800217c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f001 fd09 	bl	800217c <HAL_GPIO_WritePin>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200002c8 	.word	0x200002c8
 8000774:	200002c9 	.word	0x200002c9

08000778 <CAN_getRxFrame>:
  status |= HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

  return status;
}

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3308      	adds	r3, #8
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 ff3f 	bl	8001610 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <CAN_getRxFrame+0x3c>
 80007b0:	2201      	movs	r2, #1
 80007b2:	e000      	b.n	80007b6 <CAN_getRxFrame+0x3e>
 80007b4:	2200      	movs	r2, #0
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007c0:	d04c      	beq.n	800085c <CAN_getRxFrame+0xe4>
 80007c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007c6:	d84d      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 80007c8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007cc:	d042      	beq.n	8000854 <CAN_getRxFrame+0xdc>
 80007ce:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007d2:	d847      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 80007d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80007d8:	d038      	beq.n	800084c <CAN_getRxFrame+0xd4>
 80007da:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80007de:	d841      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 80007e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e4:	d02e      	beq.n	8000844 <CAN_getRxFrame+0xcc>
 80007e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007ea:	d83b      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 80007ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007f0:	d024      	beq.n	800083c <CAN_getRxFrame+0xc4>
 80007f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007f6:	d835      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 80007f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007fc:	d01a      	beq.n	8000834 <CAN_getRxFrame+0xbc>
 80007fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000802:	d82f      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 8000804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000808:	d010      	beq.n	800082c <CAN_getRxFrame+0xb4>
 800080a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800080e:	d829      	bhi.n	8000864 <CAN_getRxFrame+0xec>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <CAN_getRxFrame+0xa4>
 8000814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000818:	d004      	beq.n	8000824 <CAN_getRxFrame+0xac>
 800081a:	e023      	b.n	8000864 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2200      	movs	r2, #0
 8000820:	80da      	strh	r2, [r3, #6]
 8000822:	e023      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2201      	movs	r2, #1
 8000828:	80da      	strh	r2, [r3, #6]
 800082a:	e01f      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2202      	movs	r2, #2
 8000830:	80da      	strh	r2, [r3, #6]
 8000832:	e01b      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2203      	movs	r2, #3
 8000838:	80da      	strh	r2, [r3, #6]
 800083a:	e017      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2204      	movs	r2, #4
 8000840:	80da      	strh	r2, [r3, #6]
 8000842:	e013      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2205      	movs	r2, #5
 8000848:	80da      	strh	r2, [r3, #6]
 800084a:	e00f      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2206      	movs	r2, #6
 8000850:	80da      	strh	r2, [r3, #6]
 8000852:	e00b      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2207      	movs	r2, #7
 8000858:	80da      	strh	r2, [r3, #6]
 800085a:	e007      	b.n	800086c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2208      	movs	r2, #8
 8000860:	80da      	strh	r2, [r3, #6]
 8000862:	e003      	b.n	800086c <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	80da      	strh	r2, [r3, #6]
  }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3730      	adds	r7, #48	; 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <CAN_putTxFrame+0x1c>
 800088c:	2300      	movs	r3, #0
 800088e:	e001      	b.n	8000894 <CAN_putTxFrame+0x20>
 8000890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000894:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	795b      	ldrb	r3, [r3, #5]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <CAN_putTxFrame+0x2e>
 800089e:	2300      	movs	r3, #0
 80008a0:	e001      	b.n	80008a6 <CAN_putTxFrame+0x32>
 80008a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008a6:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	88db      	ldrh	r3, [r3, #6]
 80008ac:	2b08      	cmp	r3, #8
 80008ae:	d838      	bhi.n	8000922 <CAN_putTxFrame+0xae>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <CAN_putTxFrame+0x44>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008dd 	.word	0x080008dd
 80008bc:	080008e3 	.word	0x080008e3
 80008c0:	080008eb 	.word	0x080008eb
 80008c4:	080008f3 	.word	0x080008f3
 80008c8:	080008fb 	.word	0x080008fb
 80008cc:	08000903 	.word	0x08000903
 80008d0:	0800090b 	.word	0x0800090b
 80008d4:	08000913 	.word	0x08000913
 80008d8:	0800091b 	.word	0x0800091b
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	e021      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80008e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	e01d      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80008ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	e019      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80008f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	e015      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80008fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	e011      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8000902:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	e00d      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800090a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	e009      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8000912:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	e005      	b.n	8000926 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800091a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	e001      	b.n	8000926 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8000926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800092a:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	f103 0208 	add.w	r2, r3, #8
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 fe1d 	bl	8001588 <HAL_FDCAN_AddMessageToTxFifoQ>
 800094e:	4603      	mov	r3, r0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fa95 	bl	8000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f80d 	bl	800097e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f8e8 	bl	8000b38 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000968:	f000 f854 	bl	8000a14 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 800096c:	f000 f898 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000970:	f008 fe04 	bl	800957c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000974:	f7ff fea2 	bl	80006bc <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000978:	f7ff fecc 	bl	8000714 <APP_main>
 800097c:	e7fc      	b.n	8000978 <main+0x20>

0800097e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b094      	sub	sp, #80	; 0x50
 8000982:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	2238      	movs	r2, #56	; 0x38
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f009 fb1f 	bl	8009fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009a4:	f003 f936 	bl	8003c14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	2303      	movs	r3, #3
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80009be:	2324      	movs	r3, #36	; 0x24
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009c6:	2306      	movs	r3, #6
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 f9c2 	bl	8003d5c <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80009de:	f000 f8f5 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fcc6 	bl	800438c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a06:	f000 f8e1 	bl	8000bcc <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <MX_FDCAN1_Init+0x88>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 36;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a44:	2224      	movs	r2, #36	; 0x24
 8000a46:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a50:	2205      	movs	r2, #5
 8000a52:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_FDCAN1_Init+0x84>)
 8000a86:	f000 fba3 	bl	80011d0 <HAL_FDCAN_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a90:	f000 f89c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200002cc 	.word	0x200002cc
 8000a9c:	40006400 	.word	0x40006400

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <MX_USART2_UART_Init+0x94>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aea:	f004 f85b 	bl	8004ba4 <HAL_UART_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f86a 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000afc:	f004 fd5c 	bl	80055b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f000 f861 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f004 fd91 	bl	8005634 <HAL_UARTEx_SetRxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b18:	f000 f858 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000b1e:	f004 fd12 	bl	8005546 <HAL_UARTEx_DisableFifoMode>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f000 f850 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000330 	.word	0x20000330
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x90>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	21c0      	movs	r1, #192	; 0xc0
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 faed 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba2:	23c0      	movs	r3, #192	; 0xc0
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ba6:	2311      	movs	r3, #17
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f001 f95c 	bl	8001e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09a      	sub	sp, #104	; 0x68
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2244      	movs	r2, #68	; 0x44
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f009 f9c5 	bl	8009fd0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <HAL_FDCAN_MspInit+0xbc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d140      	bne.n	8000cd2 <HAL_FDCAN_MspInit+0xb2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c5a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 fdaf 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c6c:	f7ff ffae 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_FDCAN_MspInit+0xc0>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cb2:	2309      	movs	r3, #9
 8000cb4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_FDCAN_MspInit+0xc4>)
 8000cbe:	f001 f8db 	bl	8001e78 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2015      	movs	r0, #21
 8000cc8:	f000 fa4d 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ccc:	2015      	movs	r0, #21
 8000cce:	f000 fa64 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3768      	adds	r7, #104	; 0x68
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40006400 	.word	0x40006400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09a      	sub	sp, #104	; 0x68
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2244      	movs	r2, #68	; 0x44
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f009 f961 	bl	8009fd0 <memset>
  if(huart->Instance==USART2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_UART_MspInit+0xa8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d136      	bne.n	8000d86 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fd4d 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d30:	f7ff ff4c 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d38:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_UART_MspInit+0xac>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d64:	230c      	movs	r3, #12
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d74:	2307      	movs	r3, #7
 8000d76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 f879 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3768      	adds	r7, #104	; 0x68
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40021000 	.word	0x40021000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8a4 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USB_LP_IRQHandler+0x10>)
 8000df2:	f001 fae2 	bl	80023ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000998 	.word	0x20000998

08000e00 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e06:	f000 fdc3 	bl	8001990 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002cc 	.word	0x200002cc

08000e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f009 f8bb 	bl	8009fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fd75 	bl	8000958 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000e7c:	0800a100 	.word	0x0800a100
  ldr r2, =_sbss
 8000e80:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000e84:	20000eac 	.word	0x20000eac

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>

08000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f95b 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f80e 	bl	8000ebc <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e001      	b.n	8000eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eac:	f7ff fe94 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_InitTick+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d022      	beq.n	8000f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_InitTick+0x68>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f966 	bl	80011b6 <HAL_SYSTICK_Config>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10f      	bne.n	8000f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d809      	bhi.n	8000f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295
 8000efe:	f000 f932 	bl	8001166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_InitTick+0x70>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e004      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e001      	b.n	8000f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	200003c0 	.word	0x200003c0
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200003c0 	.word	0x200003c0

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d004      	beq.n	8000f90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_Delay+0x40>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f90:	bf00      	nop
 8000f92:	f7ff ffdf 	bl	8000f54 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d8f7      	bhi.n	8000f92 <HAL_Delay+0x26>
  {
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff40 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff33 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa4 	bl	800110c <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e147      	b.n	8001472 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fd12 	bl	8000c20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0210 	bic.w	r2, r2, #16
 800120a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff fea2 	bl	8000f54 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001212:	e012      	b.n	800123a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001214:	f7ff fe9e 	bl	8000f54 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e11b      	b.n	8001472 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b08      	cmp	r3, #8
 8001246:	d0e5      	beq.n	8001214 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001258:	f7ff fe7c 	bl	8000f54 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800125e:	e012      	b.n	8001286 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001260:	f7ff fe78 	bl	8000f54 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90b      	bls.n	8001286 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0f5      	b.n	8001472 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0e5      	beq.n	8001260 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0202 	orr.w	r2, r2, #2
 80012a2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a74      	ldr	r2, [pc, #464]	; (800147c <HAL_FDCAN_Init+0x2ac>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d103      	bne.n	80012b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_FDCAN_Init+0x2b0>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7c1b      	ldrb	r3, [r3, #16]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012cc:	619a      	str	r2, [r3, #24]
 80012ce:	e007      	b.n	80012e0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7c5b      	ldrb	r3, [r3, #17]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	e007      	b.n	800130a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001308:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7c9b      	ldrb	r3, [r3, #18]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	e007      	b.n	8001334 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001332:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001358:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0210 	bic.w	r2, r2, #16
 8001368:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0204 	orr.w	r2, r2, #4
 8001380:	619a      	str	r2, [r3, #24]
 8001382:	e02c      	b.n	80013de <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d028      	beq.n	80013de <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d01c      	beq.n	80013ce <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d110      	bne.n	80013de <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	619a      	str	r2, [r3, #24]
 80013cc:	e007      	b.n	80013de <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013ee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013f6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	3b01      	subs	r3, #1
 8001400:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001406:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001408:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001412:	d115      	bne.n	8001440 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	3b01      	subs	r3, #1
 8001420:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001422:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	3b01      	subs	r3, #1
 800142a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800142c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	3b01      	subs	r3, #1
 8001436:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800143c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800143e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fc3c 	bl	8001cd4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40006400 	.word	0x40006400
 8001480:	40006500 	.word	0x40006500

08001484 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001494:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d002      	beq.n	80014a2 <HAL_FDCAN_ConfigFilter+0x1e>
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d13d      	bne.n	800151e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d119      	bne.n	80014de <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014b6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014be:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e01d      	b.n	800151a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	075a      	lsls	r2, r3, #29
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	079a      	lsls	r2, r3, #30
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3304      	adds	r3, #4
 8001512:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e006      	b.n	800152c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f043 0202 	orr.w	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d110      	bne.n	800156e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e006      	b.n	800157c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	f043 0204 	orr.w	r2, r3, #4
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d12c      	bne.n	80015fa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e023      	b.n	8001608 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fbd2 	bl	8001d80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015ec:	2201      	movs	r2, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e006      	b.n	8001608 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	f043 0208 	orr.w	r2, r3, #8
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001624:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 80bc 	bne.w	80017a6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b40      	cmp	r3, #64	; 0x40
 8001632:	d121      	bne.n	8001678 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0af      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	e020      	b.n	80016ba <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e08d      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e005      	b.n	80016ea <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3304      	adds	r3, #4
 8001706:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e1b      	lsrs	r3, r3, #24
 800173c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0fda      	lsrs	r2, r3, #31
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3304      	adds	r3, #4
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	e00a      	b.n	8001774 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	441a      	add	r2, r3
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	440b      	add	r3, r1
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	3301      	adds	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	461a      	mov	r2, r3
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	4293      	cmp	r3, r2
 8001784:	d3eb      	bcc.n	800175e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b40      	cmp	r3, #64	; 0x40
 800178a:	d105      	bne.n	8001798 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001796:	e004      	b.n	80017a2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	f043 0208 	orr.w	r2, r3, #8
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	372c      	adds	r7, #44	; 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	0800a0b8 	.word	0x0800a0b8

080017c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017d6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d003      	beq.n	80017e6 <HAL_FDCAN_ActivateNotification+0x22>
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	f040 80c8 	bne.w	8001976 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03b      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d031      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d027      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01d      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d013      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d13b      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d131      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d127      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11d      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d113      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00c      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0202 	orr.w	r2, r2, #2
 8001924:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	430a      	orrs	r2, r1
 8001940:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	430a      	orrs	r2, r1
 800195e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	430a      	orrs	r2, r1
 8001970:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e006      	b.n	8001984 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	4013      	ands	r3, r2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	4013      	ands	r3, r2
 80019c6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	4013      	ands	r3, r2
 80019de:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80019ea:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a02:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f92e 	bl	8001c96 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01b      	beq.n	8001a80 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d014      	beq.n	8001a80 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a76:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8ec 	bl	8001c58 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8b6 	bl	8001c02 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fd34 	bl	8000514 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001aba:	69f9      	ldr	r1, [r7, #28]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f8ab 	bl	8001c18 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00e      	beq.n	8001aee <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8a0 	bl	8001c2e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01a      	beq.n	8001b32 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d013      	beq.n	8001b32 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b12:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f888 	bl	8001c42 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f888 	bl	8001c6e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f87c 	bl	8001c82 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d011      	beq.n	8001bbc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f876 	bl	8001cbe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d009      	beq.n	8001bec <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f858 	bl	8001caa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001cde:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d14:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	061a      	lsls	r2, r3, #24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e005      	b.n	8001d62 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3f3      	bcc.n	8001d56 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	4000a400 	.word	0x4000a400

08001d80 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001d9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e00a      	b.n	8001dc2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001db4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dcc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001dd2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001dd8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e020      	b.n	8001e54 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3303      	adds	r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3302      	adds	r3, #2
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e2a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	440b      	add	r3, r1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e38:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	440a      	add	r2, r1
 8001e40:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e42:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d3d5      	bcc.n	8001e12 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	3724      	adds	r7, #36	; 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	0800a0b8 	.word	0x0800a0b8

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e86:	e15a      	b.n	800213e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 814c 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002004:	4a56      	ldr	r2, [pc, #344]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202e:	d01f      	beq.n	8002070 <HAL_GPIO_Init+0x1f8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x2ec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d019      	beq.n	800206c <HAL_GPIO_Init+0x1f4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x2f0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1f0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e4>
 8002058:	2305      	movs	r3, #5
 800205a:	e00a      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800205c:	2306      	movs	r3, #6
 800205e:	e008      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002060:	2304      	movs	r3, #4
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002064:	2303      	movs	r3, #3
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002070:	2300      	movs	r3, #0
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x300>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f ae9d 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	48000400 	.word	0x48000400
 8002168:	48000800 	.word	0x48000800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48001000 	.word	0x48001000
 8002174:	48001400 	.word	0x48001400
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b08b      	sub	sp, #44	; 0x2c
 80021b0:	af06      	add	r7, sp, #24
 80021b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0d7      	b.n	800236e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f007 fbf6 	bl	80099c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 fac8 	bl	800577a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e04c      	b.n	800228a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3301      	adds	r3, #1
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	b298      	uxth	r0, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3336      	adds	r3, #54	; 0x36
 800222e:	4602      	mov	r2, r0
 8002230:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3303      	adds	r3, #3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3338      	adds	r3, #56	; 0x38
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	333c      	adds	r3, #60	; 0x3c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3340      	adds	r3, #64	; 0x40
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3ad      	bcc.n	80021f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e044      	b.n	8002324 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d3b5      	bcc.n	800229a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	687e      	ldr	r6, [r7, #4]
 8002336:	466d      	mov	r5, sp
 8002338:	f106 0410 	add.w	r4, r6, #16
 800233c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	1d33      	adds	r3, r6, #4
 8002346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f003 fa31 	bl	80057b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 fc29 	bl	8003bbe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002376 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_PCD_Start+0x16>
 8002388:	2302      	movs	r3, #2
 800238a:	e012      	b.n	80023b2 <HAL_PCD_Start+0x3c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f003 f9d7 	bl	800574c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 fbf0 	bl	8007b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 fbf5 	bl	8007bb6 <USB_ReadInterrupts>
 80023cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fb26 	bl	8002a2a <PCD_EP_ISR_Handler>

    return;
 80023de:	e110      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f007 fb6f 	bl	8009ae6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002408:	2100      	movs	r1, #0
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8fc 	bl	8002608 <HAL_PCD_SetAddress>

    return;
 8002410:	e0f7      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00c      	beq.n	8002436 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002434:	e0e5      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002452:	b292      	uxth	r2, r2
 8002454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002458:	e0d3      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d034      	beq.n	80024ce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024a6:	2100      	movs	r1, #0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f007 fd11 	bl	8009ed0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f007 fb52 	bl	8009b58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c6:	b292      	uxth	r2, r2
 80024c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024cc:	e099      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d027      	beq.n	8002528 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0208 	orr.w	r2, r2, #8
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0204 	orr.w	r2, r2, #4
 800251a:	b292      	uxth	r2, r2
 800251c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f007 faff 	bl	8009b24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002526:	e06c      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	b292      	uxth	r2, r2
 8002546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12b      	bne.n	80025ac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0208 	orr.w	r2, r2, #8
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002594:	b29b      	uxth	r3, r3
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025a2:	2101      	movs	r1, #1
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f007 fc93 	bl	8009ed0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025aa:	e02a      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f007 fab9 	bl	8009b24 <HAL_PCD_SuspendCallback>
    return;
 80025b2:	e026      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00f      	beq.n	80025de <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f007 fa77 	bl	8009aca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025dc:	e011      	b.n	8002602 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002600:	bf00      	nop
  }
}
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_PCD_SetAddress+0x1a>
 800261e:	2302      	movs	r3, #2
 8002620:	e013      	b.n	800264a <HAL_PCD_SetAddress+0x42>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fa90 	bl	8007b60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	4608      	mov	r0, r1
 800265c:	4611      	mov	r1, r2
 800265e:	461a      	mov	r2, r3
 8002660:	4603      	mov	r3, r0
 8002662:	70fb      	strb	r3, [r7, #3]
 8002664:	460b      	mov	r3, r1
 8002666:	803b      	strh	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002674:	2b00      	cmp	r3, #0
 8002676:	da0e      	bge.n	8002696 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	705a      	strb	r2, [r3, #1]
 8002694:	e00e      	b.n	80026b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 0207 	and.w	r2, r3, #7
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026c0:	883a      	ldrh	r2, [r7, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	78ba      	ldrb	r2, [r7, #2]
 80026ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026de:	78bb      	ldrb	r3, [r7, #2]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_PCD_EP_Open+0xa6>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e00e      	b.n	8002716 <HAL_PCD_EP_Open+0xc4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 f874 	bl	80057f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002714:	7afb      	ldrb	r3, [r7, #11]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800272a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da0e      	bge.n	8002750 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	705a      	strb	r2, [r3, #1]
 800274e:	e00e      	b.n	800276e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 0207 	and.w	r2, r3, #7
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_PCD_EP_Close+0x6a>
 8002784:	2302      	movs	r3, #2
 8002786:	e00e      	b.n	80027a6 <HAL_PCD_EP_Close+0x88>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68f9      	ldr	r1, [r7, #12]
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fbc0 	bl	8005f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	460b      	mov	r3, r1
 80027bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	f003 0207 	and.w	r2, r3, #7
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2200      	movs	r2, #0
 80027ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ee:	7afb      	ldrb	r3, [r7, #11]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fd73 	bl	80062f6 <USB_EPStartXfer>
 8002810:	e005      	b.n	800281e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fd6c 	bl	80062f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 0207 	and.w	r2, r3, #7
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fd18 	bl	80062f6 <USB_EPStartXfer>
 80028c6:	e005      	b.n	80028d4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fd11 	bl	80062f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 0207 	and.w	r2, r3, #7
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d901      	bls.n	80028fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e03e      	b.n	800297a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002900:	2b00      	cmp	r3, #0
 8002902:	da0e      	bge.n	8002922 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
 8002920:	e00c      	b.n	800293c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_EP_SetStall+0x7e>
 8002958:	2302      	movs	r3, #2
 800295a:	e00e      	b.n	800297a <HAL_PCD_EP_SetStall+0x9c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fff9 	bl	8007962 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d901      	bls.n	80029a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e040      	b.n	8002a22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da0e      	bge.n	80029c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	705a      	strb	r2, [r3, #1]
 80029c4:	e00e      	b.n	80029e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 0207 	and.w	r2, r3, #7
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_EP_ClrStall+0x82>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e00e      	b.n	8002a22 <HAL_PCD_EP_ClrStall+0xa0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fff6 	bl	8007a04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b096      	sub	sp, #88	; 0x58
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a32:	e39c      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002a4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 815e 	bne.w	8002d14 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d150      	bne.n	8002b06 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	81fb      	strh	r3, [r7, #14]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	89fb      	ldrh	r3, [r7, #14]
 8002a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3328      	adds	r3, #40	; 0x28
 8002a8c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	441a      	add	r2, r3
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f006 ffe5 	bl	8009a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 834a 	beq.w	800316e <PCD_EP_ISR_Handler+0x744>
 8002ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8345 	bne.w	800316e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b292      	uxth	r2, r2
 8002af8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b04:	e333      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d032      	beq.n	8002b8a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f005 f87b 	bl	8007c5a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b70:	4013      	ands	r3, r2
 8002b72:	823b      	strh	r3, [r7, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	8a3a      	ldrh	r2, [r7, #16]
 8002b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b7e:	b292      	uxth	r2, r2
 8002b80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f006 ff5a 	bl	8009a3c <HAL_PCD_SetupStageCallback>
 8002b88:	e2f1      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b8a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f280 82ed 	bge.w	800316e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	83fb      	strh	r3, [r7, #30]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8bfa      	ldrh	r2, [r7, #30]
 8002baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d019      	beq.n	8002c16 <PCD_EP_ISR_Handler+0x1ec>
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f005 f82d 	bl	8007c5a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	441a      	add	r2, r3
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f006 ff25 	bl	8009a60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 82a3 	bne.w	800316e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c4e:	d918      	bls.n	8002c82 <PCD_EP_ISR_Handler+0x258>
 8002c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <PCD_EP_ISR_Handler+0x240>
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	3b01      	subs	r3, #1
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	029b      	lsls	r3, r3, #10
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	e029      	b.n	8002cd6 <PCD_EP_ISR_Handler+0x2ac>
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d112      	bne.n	8002cb0 <PCD_EP_ISR_Handler+0x286>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	801a      	strh	r2, [r3, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	801a      	strh	r2, [r3, #0]
 8002cae:	e012      	b.n	8002cd6 <PCD_EP_ISR_Handler+0x2ac>
 8002cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <PCD_EP_ISR_Handler+0x2a0>
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	827b      	strh	r3, [r7, #18]
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
 8002cea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cee:	827b      	strh	r3, [r7, #18]
 8002cf0:	8a7b      	ldrh	r3, [r7, #18]
 8002cf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cf6:	827b      	strh	r3, [r7, #18]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	8a7b      	ldrh	r3, [r7, #18]
 8002cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]
 8002d12:	e22c      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d28:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f280 80f6 	bge.w	8002f1e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d48:	4013      	ands	r3, r2
 8002d4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d64:	b292      	uxth	r2, r2
 8002d66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d68:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	7b1b      	ldrb	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d123      	bne.n	8002dce <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002daa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002dae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 808e 	beq.w	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	6959      	ldr	r1, [r3, #20]
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	88da      	ldrh	r2, [r3, #6]
 8002dc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dc8:	f004 ff47 	bl	8007c5a <USB_ReadPMA>
 8002dcc:	e082      	b.n	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd0:	78db      	ldrb	r3, [r3, #3]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d10a      	bne.n	8002dec <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9d3 	bl	800318a <HAL_PCD_EP_DB_Receive>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002dea:	e073      	b.n	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d022      	beq.n	8002e90 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02c      	beq.n	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	6959      	ldr	r1, [r3, #20]
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	891a      	ldrh	r2, [r3, #8]
 8002e86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e8a:	f004 fee6 	bl	8007c5a <USB_ReadPMA>
 8002e8e:	e021      	b.n	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002eb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	6959      	ldr	r1, [r3, #20]
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	895a      	ldrh	r2, [r3, #10]
 8002ecc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed0:	f004 fec3 	bl	8007c5a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002edc:	441a      	add	r2, r3
 8002ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eea:	441a      	add	r2, r3
 8002eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <PCD_EP_ISR_Handler+0x4da>
 8002ef8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d206      	bcs.n	8002f12 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f006 fda8 	bl	8009a60 <HAL_PCD_DataOutStageCallback>
 8002f10:	e005      	b.n	8002f1e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 f9ec 	bl	80062f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8121 	beq.w	800316e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	441a      	add	r2, r3
 8002f6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f000 80a2 	beq.w	80030ca <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	7b1b      	ldrb	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8093 	beq.w	80030bc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d046      	beq.n	8003030 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d126      	bne.n	8002ff8 <PCD_EP_ISR_Handler+0x5ce>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	4413      	add	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	e061      	b.n	80030bc <PCD_EP_ISR_Handler+0x692>
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d15d      	bne.n	80030bc <PCD_EP_ISR_Handler+0x692>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	4413      	add	r3, r2
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	4413      	add	r3, r2
 8003022:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	2200      	movs	r2, #0
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	e045      	b.n	80030bc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d126      	bne.n	800308c <PCD_EP_ISR_Handler+0x662>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	4413      	add	r3, r2
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	00da      	lsls	r2, r3, #3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	4413      	add	r3, r2
 8003060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003070:	b29a      	uxth	r2, r3
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003084:	b29a      	uxth	r2, r3
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	e017      	b.n	80030bc <PCD_EP_ISR_Handler+0x692>
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d113      	bne.n	80030bc <PCD_EP_ISR_Handler+0x692>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	4413      	add	r3, r2
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	00da      	lsls	r2, r3, #3
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	4413      	add	r3, r2
 80030b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	2200      	movs	r2, #0
 80030ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f006 fce7 	bl	8009a96 <HAL_PCD_DataInStageCallback>
 80030c8:	e051      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d144      	bne.n	8003160 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80030fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003106:	429a      	cmp	r2, r3
 8003108:	d907      	bls.n	800311a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003112:	1ad2      	subs	r2, r2, r3
 8003114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003116:	619a      	str	r2, [r3, #24]
 8003118:	e002      	b.n	8003120 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f006 fcb1 	bl	8009a96 <HAL_PCD_DataInStageCallback>
 8003134:	e01b      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800313e:	441a      	add	r2, r3
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800314c:	441a      	add	r2, r3
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003158:	4618      	mov	r0, r3
 800315a:	f003 f8cc 	bl	80062f6 <USB_EPStartXfer>
 800315e:	e006      	b.n	800316e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003160:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003164:	461a      	mov	r2, r3
 8003166:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f917 	bl	800339c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003176:	b29b      	uxth	r3, r3
 8003178:	b21b      	sxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f6ff ac5a 	blt.w	8002a34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3758      	adds	r7, #88	; 0x58
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b088      	sub	sp, #32
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d07c      	beq.n	800329c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	8b7b      	ldrh	r3, [r7, #26]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d306      	bcc.n	80031e0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	8b7b      	ldrh	r3, [r7, #26]
 80031d8:	1ad2      	subs	r2, r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	619a      	str	r2, [r3, #24]
 80031de:	e002      	b.n	80031e6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d123      	bne.n	8003236 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003208:	833b      	strh	r3, [r7, #24]
 800320a:	8b3b      	ldrh	r3, [r7, #24]
 800320c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003210:	833b      	strh	r3, [r7, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	8b3b      	ldrh	r3, [r7, #24]
 8003222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	b29b      	uxth	r3, r3
 8003234:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01f      	beq.n	8003280 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	82fb      	strh	r3, [r7, #22]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800327c:	b29b      	uxth	r3, r3
 800327e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003280:	8b7b      	ldrh	r3, [r7, #26]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8085 	beq.w	8003392 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6959      	ldr	r1, [r3, #20]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	891a      	ldrh	r2, [r3, #8]
 8003294:	8b7b      	ldrh	r3, [r7, #26]
 8003296:	f004 fce0 	bl	8007c5a <USB_ReadPMA>
 800329a:	e07a      	b.n	8003392 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	8b7b      	ldrh	r3, [r7, #26]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d306      	bcc.n	80032da <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	619a      	str	r2, [r3, #24]
 80032d8:	e002      	b.n	80032e0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d123      	bne.n	8003330 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	83fb      	strh	r3, [r7, #30]
 8003304:	8bfb      	ldrh	r3, [r7, #30]
 8003306:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800330a:	83fb      	strh	r3, [r7, #30]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	8bfb      	ldrh	r3, [r7, #30]
 800331c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332c:	b29b      	uxth	r3, r3
 800332e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d11f      	bne.n	800337a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	83bb      	strh	r3, [r7, #28]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	8bbb      	ldrh	r3, [r7, #28]
 8003366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6959      	ldr	r1, [r3, #20]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	895a      	ldrh	r2, [r3, #10]
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	f004 fc64 	bl	8007c5a <USB_ReadPMA>
    }
  }

  return count;
 8003392:	8b7b      	ldrh	r3, [r7, #26]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b0a2      	sub	sp, #136	; 0x88
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 81c5 	beq.w	8003740 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d907      	bls.n	80033fa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	619a      	str	r2, [r3, #24]
 80033f8:	e002      	b.n	8003400 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 80b9 	bne.w	800357c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d126      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	4413      	add	r3, r2
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00da      	lsls	r2, r3, #3
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	4413      	add	r3, r2
 8003434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003444:	b29a      	uxth	r2, r3
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003458:	b29a      	uxth	r2, r3
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e01a      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d116      	bne.n	8003496 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	4413      	add	r3, r2
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00da      	lsls	r2, r3, #3
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	4413      	add	r3, r2
 800348a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d126      	bne.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x156>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4413      	add	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	00da      	lsls	r2, r3, #3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	801a      	strh	r2, [r3, #0]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	801a      	strh	r2, [r3, #0]
 80034f0:	e017      	b.n	8003522 <HAL_PCD_EP_DB_Transmit+0x186>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d113      	bne.n	8003522 <HAL_PCD_EP_DB_Transmit+0x186>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	4413      	add	r3, r2
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00da      	lsls	r2, r3, #3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	4413      	add	r3, r2
 8003516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2200      	movs	r2, #0
 8003520:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f006 fab4 	bl	8009a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 82d2 	beq.w	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	827b      	strh	r3, [r7, #18]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8a7b      	ldrh	r3, [r7, #18]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]
 800357a:	e2b0      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d021      	beq.n	80035ca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 8284 	bne.w	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035de:	441a      	add	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ec:	441a      	add	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d309      	bcc.n	8003612 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	621a      	str	r2, [r3, #32]
 8003610:	e015      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800361a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800361e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003628:	e009      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d155      	bne.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x356>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	4413      	add	r3, r2
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	00da      	lsls	r2, r3, #3
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	4413      	add	r3, r2
 8003668:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	2b3e      	cmp	r3, #62	; 0x3e
 8003672:	d916      	bls.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x306>
 8003674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
 800367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	3b01      	subs	r3, #1
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
 800368a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368c:	b29b      	uxth	r3, r3
 800368e:	029b      	lsls	r3, r3, #10
 8003690:	b29b      	uxth	r3, r3
 8003692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369a:	b29a      	uxth	r2, r3
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	e043      	b.n	800372a <HAL_PCD_EP_DB_Transmit+0x38e>
 80036a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d112      	bne.n	80036ce <HAL_PCD_EP_DB_Transmit+0x332>
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	e02d      	b.n	800372a <HAL_PCD_EP_DB_Transmit+0x38e>
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x348>
 80036de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e0:	3301      	adds	r3, #1
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	801a      	strh	r2, [r3, #0]
 80036f0:	e01b      	b.n	800372a <HAL_PCD_EP_DB_Transmit+0x38e>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d117      	bne.n	800372a <HAL_PCD_EP_DB_Transmit+0x38e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370e:	4413      	add	r3, r2
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00da      	lsls	r2, r3, #3
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	4413      	add	r3, r2
 800371c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003724:	b29a      	uxth	r2, r3
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	891a      	ldrh	r2, [r3, #8]
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	b29b      	uxth	r3, r3
 800373a:	f004 fa4c 	bl	8007bd6 <USB_WritePMA>
 800373e:	e1ce      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4413      	add	r3, r2
 800375a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003764:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003770:	429a      	cmp	r2, r3
 8003772:	d307      	bcc.n	8003784 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800377c:	1ad2      	subs	r2, r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	619a      	str	r2, [r3, #24]
 8003782:	e002      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 80c4 	bne.w	800391c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d126      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x44e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b0:	4413      	add	r3, r2
 80037b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	00da      	lsls	r2, r3, #3
 80037ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037bc:	4413      	add	r3, r2
 80037be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037c2:	667b      	str	r3, [r7, #100]	; 0x64
 80037c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e01a      	b.n	8003820 <HAL_PCD_EP_DB_Transmit+0x484>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d116      	bne.n	8003820 <HAL_PCD_EP_DB_Transmit+0x484>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	673b      	str	r3, [r7, #112]	; 0x70
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003806:	4413      	add	r3, r2
 8003808:	673b      	str	r3, [r7, #112]	; 0x70
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00da      	lsls	r2, r3, #3
 8003810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003812:	4413      	add	r3, r2
 8003814:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003818:	66fb      	str	r3, [r7, #108]	; 0x6c
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	2200      	movs	r2, #0
 800381e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d12f      	bne.n	800388e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003846:	4413      	add	r3, r2
 8003848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	00da      	lsls	r2, r3, #3
 8003852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003856:	4413      	add	r3, r2
 8003858:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800385c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800386c:	b29a      	uxth	r2, r3
 800386e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003884:	b29a      	uxth	r2, r3
 8003886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e017      	b.n	80038be <HAL_PCD_EP_DB_Transmit+0x522>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d113      	bne.n	80038be <HAL_PCD_EP_DB_Transmit+0x522>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038a4:	4413      	add	r3, r2
 80038a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00da      	lsls	r2, r3, #3
 80038ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80038b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f006 f8e6 	bl	8009a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8104 	bne.w	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003916:	b29b      	uxth	r3, r3
 8003918:	8013      	strh	r3, [r2, #0]
 800391a:	e0e0      	b.n	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d121      	bne.n	800396a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 80b4 	bne.w	8003ade <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800397e:	441a      	add	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800398c:	441a      	add	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d309      	bcc.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	621a      	str	r2, [r3, #32]
 80039b0:	e015      	b.n	80039de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80039ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039c8:	e009      	b.n	80039de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	663b      	str	r3, [r7, #96]	; 0x60
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d155      	bne.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a00:	4413      	add	r3, r2
 8003a02:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	00da      	lsls	r2, r3, #3
 8003a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a12:	657b      	str	r3, [r7, #84]	; 0x54
 8003a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a16:	2b3e      	cmp	r3, #62	; 0x3e
 8003a18:	d916      	bls.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x694>
 8003a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e040      	b.n	8003aca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d112      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	e02a      	b.n	8003aca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	677b      	str	r3, [r7, #116]	; 0x74
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a86:	3301      	adds	r3, #1
 8003a88:	677b      	str	r3, [r7, #116]	; 0x74
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e018      	b.n	8003aca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d114      	bne.n	8003aca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	4413      	add	r3, r2
 8003ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00da      	lsls	r2, r3, #3
 8003ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aba:	4413      	add	r3, r2
 8003abc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6959      	ldr	r1, [r3, #20]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	895a      	ldrh	r2, [r3, #10]
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f004 f87c 	bl	8007bd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	823b      	strh	r3, [r7, #16]
 8003afa:	8a3b      	ldrh	r3, [r7, #16]
 8003afc:	f083 0310 	eor.w	r3, r3, #16
 8003b00:	823b      	strh	r3, [r7, #16]
 8003b02:	8a3b      	ldrh	r3, [r7, #16]
 8003b04:	f083 0320 	eor.w	r3, r3, #32
 8003b08:	823b      	strh	r3, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3788      	adds	r7, #136	; 0x88
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	4613      	mov	r3, r2
 8003b48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	897b      	ldrh	r3, [r7, #10]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e009      	b.n	8003b82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b6e:	897a      	ldrh	r2, [r7, #10]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b82:	893b      	ldrh	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	80da      	strh	r2, [r3, #6]
 8003b96:	e00b      	b.n	8003bb0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d141      	bne.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c22:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d131      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c36:	4a46      	ldr	r2, [pc, #280]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c48:	4a41      	ldr	r2, [pc, #260]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2232      	movs	r2, #50	; 0x32
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	4a3f      	ldr	r2, [pc, #252]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	0c9b      	lsrs	r3, r3, #18
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c66:	e002      	b.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6e:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	d102      	bne.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f2      	bne.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d158      	bne.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e057      	b.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ca4:	e04d      	b.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cac:	d141      	bne.n	8003d32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d131      	bne.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd4:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2232      	movs	r2, #50	; 0x32
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	0c9b      	lsrs	r3, r3, #18
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf2:	e002      	b.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d102      	bne.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f2      	bne.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d112      	bne.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e011      	b.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d30:	e007      	b.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40007000 	.word	0x40007000
 8003d54:	20000000 	.word	0x20000000
 8003d58:	431bde83 	.word	0x431bde83

08003d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e306      	b.n	800437c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d075      	beq.n	8003e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	4b97      	ldr	r3, [pc, #604]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d84:	4b94      	ldr	r3, [pc, #592]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d102      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3e>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d002      	beq.n	8003da0 <HAL_RCC_OscConfig+0x44>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05b      	beq.n	8003e64 <HAL_RCC_OscConfig+0x108>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d157      	bne.n	8003e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e2e1      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x74>
 8003dc2:	4b85      	ldr	r3, [pc, #532]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a84      	ldr	r2, [pc, #528]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x98>
 8003dda:	4b7f      	ldr	r3, [pc, #508]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7e      	ldr	r2, [pc, #504]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b7c      	ldr	r3, [pc, #496]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7b      	ldr	r2, [pc, #492]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003df4:	4b78      	ldr	r3, [pc, #480]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a77      	ldr	r2, [pc, #476]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b75      	ldr	r3, [pc, #468]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a74      	ldr	r2, [pc, #464]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd f89e 	bl	8000f54 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd f89a 	bl	8000f54 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e2a6      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2e:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xc0>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd f88a 	bl	8000f54 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd f886 	bl	8000f54 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e292      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e56:	4b60      	ldr	r3, [pc, #384]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0xe8>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d075      	beq.n	8003f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e72:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7c:	4b56      	ldr	r3, [pc, #344]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_OscConfig+0x136>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_OscConfig+0x13c>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d11f      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e98:	4b4f      	ldr	r3, [pc, #316]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x154>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e265      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	4946      	ldr	r1, [pc, #280]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ec4:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fff7 	bl	8000ebc <HAL_InitTick>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d043      	beq.n	8003f5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e251      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd f832 	bl	8000f54 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fd f82e 	bl	8000f54 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e23a      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f06:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	492d      	ldr	r1, [pc, #180]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
 8003f26:	e01a      	b.n	8003f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd f80e 	bl	8000f54 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fd f80a 	bl	8000f54 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e216      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1e0>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d041      	beq.n	8003fee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01c      	beq.n	8003fac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fc ffe7 	bl	8000f54 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7fc ffe3 	bl	8000f54 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e1ef      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCC_OscConfig+0x22e>
 8003faa:	e020      	b.n	8003fee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fc ffca 	bl	8000f54 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc2:	e00d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fc ffc6 	bl	8000f54 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d906      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1d2      	b.n	800437c <HAL_RCC_OscConfig+0x620>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe0:	4b8c      	ldr	r3, [pc, #560]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ea      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80a6 	beq.w	8004148 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x2b4>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x2b6>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4b7f      	ldr	r3, [pc, #508]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	4a7e      	ldr	r2, [pc, #504]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6593      	str	r3, [r2, #88]	; 0x58
 8004022:	4b7c      	ldr	r3, [pc, #496]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004032:	4b79      	ldr	r3, [pc, #484]	; (8004218 <HAL_RCC_OscConfig+0x4bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x4bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a75      	ldr	r2, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x4bc>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fc ff83 	bl	8000f54 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fc ff7f 	bl	8000f54 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e18b      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004064:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0x4bc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_RCC_OscConfig+0x32e>
 8004078:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	4a65      	ldr	r2, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004088:	e024      	b.n	80040d4 <HAL_RCC_OscConfig+0x378>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b05      	cmp	r3, #5
 8004090:	d110      	bne.n	80040b4 <HAL_RCC_OscConfig+0x358>
 8004092:	4b60      	ldr	r3, [pc, #384]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4a5e      	ldr	r2, [pc, #376]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a2:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	4a5a      	ldr	r2, [pc, #360]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b2:	e00f      	b.n	80040d4 <HAL_RCC_OscConfig+0x378>
 80040b4:	4b57      	ldr	r3, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	4a56      	ldr	r2, [pc, #344]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fc ff3a 	bl	8000f54 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fc ff36 	bl	8000f54 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e140      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ed      	beq.n	80040e4 <HAL_RCC_OscConfig+0x388>
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fc ff23 	bl	8000f54 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fc ff1f 	bl	8000f54 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e129      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004128:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ed      	bne.n	8004112 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	4a34      	ldr	r2, [pc, #208]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d03c      	beq.n	80041ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01c      	beq.n	8004196 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800415e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004162:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fc fef2 	bl	8000f54 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004174:	f7fc feee 	bl	8000f54 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0fa      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <HAL_RCC_OscConfig+0x418>
 8004194:	e01b      	b.n	80041ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 8004198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fc fed5 	bl	8000f54 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ae:	f7fc fed1 	bl	8000f54 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0dd      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ef      	bne.n	80041ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80d1 	beq.w	800437a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	f000 808b 	beq.w	80042fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d15e      	bne.n	80042ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_RCC_OscConfig+0x4b8>)
 80041f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fc feab 	bl	8000f54 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004200:	e00c      	b.n	800421c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004202:	f7fc fea7 	bl	8000f54 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d905      	bls.n	800421c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0b3      	b.n	800437c <HAL_RCC_OscConfig+0x620>
 8004214:	40021000 	.word	0x40021000
 8004218:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ec      	bne.n	8004202 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x62c>)
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6a11      	ldr	r1, [r2, #32]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004238:	3a01      	subs	r2, #1
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	4311      	orrs	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004242:	0212      	lsls	r2, r2, #8
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800424a:	0852      	lsrs	r2, r2, #1
 800424c:	3a01      	subs	r2, #1
 800424e:	0552      	lsls	r2, r2, #21
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004256:	0852      	lsrs	r2, r2, #1
 8004258:	3a01      	subs	r2, #1
 800425a:	0652      	lsls	r2, r2, #25
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004262:	06d2      	lsls	r2, r2, #27
 8004264:	430a      	orrs	r2, r1
 8004266:	4947      	ldr	r1, [pc, #284]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 8004268:	4313      	orrs	r3, r2
 800426a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a44      	ldr	r2, [pc, #272]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a41      	ldr	r2, [pc, #260]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004282:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fc fe66 	bl	8000f54 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fc fe62 	bl	8000f54 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e06e      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	4b39      	ldr	r3, [pc, #228]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x530>
 80042aa:	e066      	b.n	800437a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	4b35      	ldr	r3, [pc, #212]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042b8:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a31      	ldr	r2, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fc fe3e 	bl	8000f54 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fc fe3a 	bl	8000f54 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e046      	b.n	800437c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ee:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x580>
 80042fa:	e03e      	b.n	800437a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e039      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCC_OscConfig+0x628>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	429a      	cmp	r2, r3
 800431a:	d12c      	bne.n	8004376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	3b01      	subs	r3, #1
 8004328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d123      	bne.n	8004376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d11b      	bne.n	8004376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d113      	bne.n	8004376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d109      	bne.n	8004376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	019f800c 	.word	0x019f800c

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e11e      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b91      	ldr	r3, [pc, #580]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	498c      	ldr	r1, [pc, #560]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b8a      	ldr	r3, [pc, #552]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e106      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d073      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d129      	bne.n	800443c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e8:	4b81      	ldr	r3, [pc, #516]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f4      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043f8:	f000 f99e 	bl	8004738 <RCC_GetSysClockFreqFromPLLSource>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a7c      	ldr	r2, [pc, #496]	; (80045f4 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d93f      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004406:	4b7a      	ldr	r3, [pc, #488]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d033      	beq.n	8004486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12f      	bne.n	8004486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004426:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442e:	4a70      	ldr	r2, [pc, #448]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e024      	b.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004444:	4b6a      	ldr	r3, [pc, #424]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0c6      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004454:	4b66      	ldr	r3, [pc, #408]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0be      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004464:	f000 f8ce 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a61      	ldr	r2, [pc, #388]	; (80045f4 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d909      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004472:	4b5f      	ldr	r3, [pc, #380]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	4a5d      	ldr	r2, [pc, #372]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800447c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4957      	ldr	r1, [pc, #348]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fc fd5c 	bl	8000f54 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fc fd58 	bl	8000f54 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e095      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a42      	ldr	r2, [pc, #264]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044f8:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004500:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4936      	ldr	r1, [pc, #216]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	e008      	b.n	800452e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d105      	bne.n	800452e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004522:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d21d      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453c:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 020f 	bic.w	r2, r3, #15
 8004544:	4929      	ldr	r1, [pc, #164]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800454c:	f7fc fd02 	bl	8000f54 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fc fcfe 	bl	8000f54 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e03b      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x260>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d1ed      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4917      	ldr	r1, [pc, #92]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490f      	ldr	r1, [pc, #60]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b6:	f000 f825 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490c      	ldr	r1, [pc, #48]	; (80045f8 <HAL_RCC_ClockConfig+0x26c>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x270>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fc6e 	bl	8000ebc <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40022000 	.word	0x40022000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	04c4b400 	.word	0x04c4b400
 80045f8:	0800a0a0 	.word	0x0800a0a0
 80045fc:	20000000 	.word	0x20000000
 8004600:	20000004 	.word	0x20000004

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d102      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e047      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e03e      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d136      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	68d2      	ldr	r2, [r2, #12]
 8004664:	0a12      	lsrs	r2, r2, #8
 8004666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	0a12      	lsrs	r2, r2, #8
 8004680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
      break;
 800468a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0e5b      	lsrs	r3, r3, #25
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e001      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046ac:	693b      	ldr	r3, [r7, #16]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800a0b0 	.word	0x0800a0b0

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800a0b0 	.word	0x0800a0b0

08004738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d10c      	bne.n	8004776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004766:	68d2      	ldr	r2, [r2, #12]
 8004768:	0a12      	lsrs	r2, r2, #8
 800476a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
    break;
 8004774:	e00c      	b.n	8004790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	0a12      	lsrs	r2, r2, #8
 8004784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    break;
 800478e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047aa:	687b      	ldr	r3, [r7, #4]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40021000 	.word	0x40021000
 80047bc:	007a1200 	.word	0x007a1200
 80047c0:	00f42400 	.word	0x00f42400

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047cc:	2300      	movs	r3, #0
 80047ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d0:	2300      	movs	r3, #0
 80047d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8098 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	4a3f      	ldr	r2, [pc, #252]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6593      	str	r3, [r2, #88]	; 0x58
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480e:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a39      	ldr	r2, [pc, #228]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800481a:	f7fc fb9b 	bl	8000f54 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004820:	e009      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fc fb97 	bl	8000f54 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d902      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	74fb      	strb	r3, [r7, #19]
        break;
 8004834:	e005      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ef      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d159      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc fb57 	bl	8000f54 <HAL_GetTick>
 80048a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00b      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fc fb53 	bl	8000f54 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
            break;
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ec      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	74bb      	strb	r3, [r7, #18]
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004900:	7c7b      	ldrb	r3, [r7, #17]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4ba6      	ldr	r3, [pc, #664]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	4aa5      	ldr	r2, [pc, #660]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491e:	4ba0      	ldr	r3, [pc, #640]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f023 0203 	bic.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	499c      	ldr	r1, [pc, #624]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004940:	4b97      	ldr	r3, [pc, #604]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 020c 	bic.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4994      	ldr	r1, [pc, #592]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004962:	4b8f      	ldr	r3, [pc, #572]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	498b      	ldr	r1, [pc, #556]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004984:	4b86      	ldr	r3, [pc, #536]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4983      	ldr	r1, [pc, #524]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a6:	4b7e      	ldr	r3, [pc, #504]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	497a      	ldr	r1, [pc, #488]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c8:	4b75      	ldr	r3, [pc, #468]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4972      	ldr	r1, [pc, #456]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ea:	4b6d      	ldr	r3, [pc, #436]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4969      	ldr	r1, [pc, #420]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0c:	4b64      	ldr	r3, [pc, #400]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4961      	ldr	r1, [pc, #388]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	4958      	ldr	r1, [pc, #352]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a50:	4b53      	ldr	r3, [pc, #332]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	4950      	ldr	r1, [pc, #320]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b4b      	ldr	r3, [pc, #300]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a4a      	ldr	r2, [pc, #296]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a88:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4942      	ldr	r1, [pc, #264]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b3d      	ldr	r3, [pc, #244]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ac0:	4b37      	ldr	r3, [pc, #220]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4934      	ldr	r1, [pc, #208]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ade:	d105      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a2e      	ldr	r2, [pc, #184]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	4918      	ldr	r1, [pc, #96]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	490a      	ldr	r1, [pc, #40]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b86:	d105      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc f88d 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2224      	movs	r2, #36	; 0x24
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f82c 	bl	8004c44 <UART_SetConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 faec 	bl	80051dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fb73 	bl	8005320 <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b08c      	sub	sp, #48	; 0x30
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4bab      	ldr	r3, [pc, #684]	; (8004f20 <UART_SetConfig+0x2dc>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4aa0      	ldr	r2, [pc, #640]	; (8004f24 <UART_SetConfig+0x2e0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cac:	4313      	orrs	r3, r2
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f023 010f 	bic.w	r1, r3, #15
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a91      	ldr	r2, [pc, #580]	; (8004f28 <UART_SetConfig+0x2e4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d125      	bne.n	8004d34 <UART_SetConfig+0xf0>
 8004ce8:	4b90      	ldr	r3, [pc, #576]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d81a      	bhi.n	8004d2c <UART_SetConfig+0xe8>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xb8>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e0d6      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e0d2      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e0ce      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e0ca      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e0c6      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7d      	ldr	r2, [pc, #500]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d138      	bne.n	8004db0 <UART_SetConfig+0x16c>
 8004d3e:	4b7b      	ldr	r3, [pc, #492]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d82d      	bhi.n	8004da8 <UART_SetConfig+0x164>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x110>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004da9 	.word	0x08004da9
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004da9 	.word	0x08004da9
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8e:	e098      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e094      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e090      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e08c      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e088      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5f      	ldr	r2, [pc, #380]	; (8004f34 <UART_SetConfig+0x2f0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d125      	bne.n	8004e06 <UART_SetConfig+0x1c2>
 8004dba:	4b5c      	ldr	r3, [pc, #368]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d016      	beq.n	8004df6 <UART_SetConfig+0x1b2>
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d818      	bhi.n	8004dfe <UART_SetConfig+0x1ba>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d00a      	beq.n	8004de6 <UART_SetConfig+0x1a2>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d814      	bhi.n	8004dfe <UART_SetConfig+0x1ba>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <UART_SetConfig+0x19a>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d008      	beq.n	8004dee <UART_SetConfig+0x1aa>
 8004ddc:	e00f      	b.n	8004dfe <UART_SetConfig+0x1ba>
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de4:	e06d      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dec:	e069      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004dee:	2304      	movs	r3, #4
 8004df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df4:	e065      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004df6:	2308      	movs	r3, #8
 8004df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfc:	e061      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004dfe:	2310      	movs	r3, #16
 8004e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e04:	e05d      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4b      	ldr	r2, [pc, #300]	; (8004f38 <UART_SetConfig+0x2f4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d125      	bne.n	8004e5c <UART_SetConfig+0x218>
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d016      	beq.n	8004e4c <UART_SetConfig+0x208>
 8004e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e20:	d818      	bhi.n	8004e54 <UART_SetConfig+0x210>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d00a      	beq.n	8004e3c <UART_SetConfig+0x1f8>
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d814      	bhi.n	8004e54 <UART_SetConfig+0x210>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x1f0>
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x200>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x210>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3a:	e042      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e42:	e03e      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	e03a      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e52:	e036      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5a:	e032      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <UART_SetConfig+0x2e0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d12a      	bne.n	8004ebc <UART_SetConfig+0x278>
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e74:	d01a      	beq.n	8004eac <UART_SetConfig+0x268>
 8004e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7a:	d81b      	bhi.n	8004eb4 <UART_SetConfig+0x270>
 8004e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e80:	d00c      	beq.n	8004e9c <UART_SetConfig+0x258>
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d815      	bhi.n	8004eb4 <UART_SetConfig+0x270>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <UART_SetConfig+0x250>
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d008      	beq.n	8004ea4 <UART_SetConfig+0x260>
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x270>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e012      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e00e      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	e00a      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb2:	e006      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eba:	e002      	b.n	8004ec2 <UART_SetConfig+0x27e>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <UART_SetConfig+0x2e0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	f040 80a8 	bne.w	800501e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d834      	bhi.n	8004f40 <UART_SetConfig+0x2fc>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0x298>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f41 	.word	0x08004f41
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f41 	.word	0x08004f41
 8004eec:	08004f0f 	.word	0x08004f0f
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08004f41 	.word	0x08004f41
 8004ef8:	08004f41 	.word	0x08004f41
 8004efc:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7ff fbee 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f06:	e021      	b.n	8004f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <UART_SetConfig+0x2f8>)
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f0c:	e01e      	b.n	8004f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7ff fb79 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f14:	e01a      	b.n	8004f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f1c:	e016      	b.n	8004f4c <UART_SetConfig+0x308>
 8004f1e:	bf00      	nop
 8004f20:	cfff69f3 	.word	0xcfff69f3
 8004f24:	40008000 	.word	0x40008000
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40004400 	.word	0x40004400
 8004f34:	40004800 	.word	0x40004800
 8004f38:	40004c00 	.word	0x40004c00
 8004f3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 812a 	beq.w	80051a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	4a9e      	ldr	r2, [pc, #632]	; (80051d4 <UART_SetConfig+0x590>)
 8004f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d305      	bcc.n	8004f84 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f8a:	e10d      	b.n	80051a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2200      	movs	r2, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	60fa      	str	r2, [r7, #12]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	4a8e      	ldr	r2, [pc, #568]	; (80051d4 <UART_SetConfig+0x590>)
 8004f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fae:	f7fb f933 	bl	8000218 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	020b      	lsls	r3, r1, #8
 8004fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fc8:	0202      	lsls	r2, r0, #8
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	6849      	ldr	r1, [r1, #4]
 8004fce:	0849      	lsrs	r1, r1, #1
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	eb12 0804 	adds.w	r8, r2, r4
 8004fda:	eb43 0905 	adc.w	r9, r3, r5
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	4693      	mov	fp, r2
 8004fe8:	4652      	mov	r2, sl
 8004fea:	465b      	mov	r3, fp
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb f912 	bl	8000218 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005002:	d308      	bcc.n	8005016 <UART_SetConfig+0x3d2>
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d204      	bcs.n	8005016 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	e0c8      	b.n	80051a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800501c:	e0c4      	b.n	80051a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d167      	bne.n	80050f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800502c:	2b08      	cmp	r3, #8
 800502e:	d828      	bhi.n	8005082 <UART_SetConfig+0x43e>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <UART_SetConfig+0x3f4>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800505d 	.word	0x0800505d
 800503c:	08005065 	.word	0x08005065
 8005040:	0800506d 	.word	0x0800506d
 8005044:	08005083 	.word	0x08005083
 8005048:	08005073 	.word	0x08005073
 800504c:	08005083 	.word	0x08005083
 8005050:	08005083 	.word	0x08005083
 8005054:	08005083 	.word	0x08005083
 8005058:	0800507b 	.word	0x0800507b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7ff fb40 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005062:	e014      	b.n	800508e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7ff fb52 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800506a:	e010      	b.n	800508e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800506c:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <UART_SetConfig+0x594>)
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005070:	e00d      	b.n	800508e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005072:	f7ff fac7 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005078:	e009      	b.n	800508e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005080:	e005      	b.n	800508e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800508c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8089 	beq.w	80051a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	4a4e      	ldr	r2, [pc, #312]	; (80051d4 <UART_SetConfig+0x590>)
 800509c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a8:	005a      	lsls	r2, r3, #1
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	441a      	add	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d916      	bls.n	80050f0 <UART_SetConfig+0x4ac>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d212      	bcs.n	80050f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f023 030f 	bic.w	r3, r3, #15
 80050d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	b29a      	uxth	r2, r3
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	8bfa      	ldrh	r2, [r7, #30]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	e05b      	b.n	80051a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050f6:	e057      	b.n	80051a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d828      	bhi.n	8005152 <UART_SetConfig+0x50e>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x4c4>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005153 	.word	0x08005153
 8005118:	08005143 	.word	0x08005143
 800511c:	08005153 	.word	0x08005153
 8005120:	08005153 	.word	0x08005153
 8005124:	08005153 	.word	0x08005153
 8005128:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7ff fad8 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005132:	e014      	b.n	800515e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7ff faea 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800513a:	e010      	b.n	800515e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <UART_SetConfig+0x594>)
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7ff fa5f 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800515c:	bf00      	nop
    }

    if (pclk != 0U)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d021      	beq.n	80051a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <UART_SetConfig+0x590>)
 800516a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516e:	461a      	mov	r2, r3
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	fbb3 f2f2 	udiv	r2, r3, r2
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	441a      	add	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d909      	bls.n	80051a2 <UART_SetConfig+0x55e>
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d205      	bcs.n	80051a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	b29a      	uxth	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e002      	b.n	80051a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3730      	adds	r7, #48	; 0x30
 80051cc:	46bd      	mov	sp, r7
 80051ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d2:	bf00      	nop
 80051d4:	0800a0c8 	.word	0x0800a0c8
 80051d8:	00f42400 	.word	0x00f42400

080051dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052da:	d10a      	bne.n	80052f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005330:	f7fb fe10 	bl	8000f54 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10e      	bne.n	8005362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f82f 	bl	80053b6 <UART_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e025      	b.n	80053ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d10e      	bne.n	800538e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f819 	bl	80053b6 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b09c      	sub	sp, #112	; 0x70
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c6:	e0a9      	b.n	800551c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	f000 80a5 	beq.w	800551c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fb fdbf 	bl	8000f54 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d140      	bne.n	800546a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053fc:	667b      	str	r3, [r7, #100]	; 0x64
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005408:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800540c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e6      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	663b      	str	r3, [r7, #96]	; 0x60
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800543a:	64ba      	str	r2, [r7, #72]	; 0x48
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e5      	bne.n	800541a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e069      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d051      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005486:	d149      	bne.n	800551c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005490:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
 80054b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e6      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	66bb      	str	r3, [r7, #104]	; 0x68
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054e4:	623a      	str	r2, [r7, #32]
 80054e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e010      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	429a      	cmp	r2, r3
 8005538:	f43f af46 	beq.w	80053c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3770      	adds	r7, #112	; 0x70
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_UARTEx_DisableFifoMode+0x16>
 8005558:	2302      	movs	r3, #2
 800555a:	e027      	b.n	80055ac <HAL_UARTEx_DisableFifoMode+0x66>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800558a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e02d      	b.n	800562c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2224      	movs	r2, #36	; 0x24
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f84f 	bl	80056b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e02d      	b.n	80056a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	; 0x24
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f811 	bl	80056b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056d0:	e031      	b.n	8005736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056d2:	2308      	movs	r3, #8
 80056d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056d6:	2308      	movs	r3, #8
 80056d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	0e5b      	lsrs	r3, r3, #25
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	0f5b      	lsrs	r3, r3, #29
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	7b3a      	ldrb	r2, [r7, #12]
 80056fe:	4911      	ldr	r1, [pc, #68]	; (8005744 <UARTEx_SetNbDataToProcess+0x94>)
 8005700:	5c8a      	ldrb	r2, [r1, r2]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005706:	7b3a      	ldrb	r2, [r7, #12]
 8005708:	490f      	ldr	r1, [pc, #60]	; (8005748 <UARTEx_SetNbDataToProcess+0x98>)
 800570a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800570c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	7b7a      	ldrb	r2, [r7, #13]
 800571c:	4909      	ldr	r1, [pc, #36]	; (8005744 <UARTEx_SetNbDataToProcess+0x94>)
 800571e:	5c8a      	ldrb	r2, [r1, r2]
 8005720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005724:	7b7a      	ldrb	r2, [r7, #13]
 8005726:	4908      	ldr	r1, [pc, #32]	; (8005748 <UARTEx_SetNbDataToProcess+0x98>)
 8005728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800572a:	fb93 f3f2 	sdiv	r3, r3, r2
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	0800a0e0 	.word	0x0800a0e0
 8005748:	0800a0e8 	.word	0x0800a0e8

0800574c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800575c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005760:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005782:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005786:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	b29b      	uxth	r3, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	4013      	ands	r3, r2
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057b0:	b084      	sub	sp, #16
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	f107 0014 	add.w	r0, r7, #20
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	b004      	add	sp, #16
 80057f0:	4770      	bx	lr
	...

080057f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b09d      	sub	sp, #116	; 0x74
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d81f      	bhi.n	8005866 <USB_ActivateEndpoint+0x72>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USB_ActivateEndpoint+0x38>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	08005859 	.word	0x08005859
 8005834:	0800586f 	.word	0x0800586f
 8005838:	0800584b 	.word	0x0800584b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800583c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005844:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005848:	e012      	b.n	8005870 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800584a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800584e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005852:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005856:	e00b      	b.n	8005870 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005858:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800585c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005860:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005864:	e004      	b.n	8005870 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800586c:	e000      	b.n	8005870 <USB_ActivateEndpoint+0x7c>
      break;
 800586e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	b21a      	sxth	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b21b      	sxth	r3, r3
 80058b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80058c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	b29b      	uxth	r3, r3
 80058da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 8149 	bne.w	8005b78 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8084 	beq.w	80059f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	4413      	add	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	00da      	lsls	r2, r3, #3
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	88db      	ldrh	r3, [r3, #6]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	827b      	strh	r3, [r7, #18]
 8005932:	8a7b      	ldrh	r3, [r7, #18]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01b      	beq.n	8005974 <USB_ActivateEndpoint+0x180>
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	823b      	strh	r3, [r7, #16]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	8a3b      	ldrh	r3, [r7, #16]
 8005960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d020      	beq.n	80059be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	81bb      	strh	r3, [r7, #12]
 8005994:	89bb      	ldrh	r3, [r7, #12]
 8005996:	f083 0320 	eor.w	r3, r3, #32
 800599a:	81bb      	strh	r3, [r7, #12]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	89bb      	ldrh	r3, [r7, #12]
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
 80059bc:	e2a6      	b.n	8005f0c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d4:	81fb      	strh	r3, [r7, #14]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	89fb      	ldrh	r3, [r7, #14]
 80059e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8013      	strh	r3, [r2, #0]
 80059f6:	e289      	b.n	8005f0c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	4413      	add	r3, r2
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	00da      	lsls	r2, r3, #3
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	4413      	add	r3, r2
 8005a16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	88db      	ldrh	r3, [r3, #6]
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	4413      	add	r3, r2
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	00da      	lsls	r2, r3, #3
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b3e      	cmp	r3, #62	; 0x3e
 8005a56:	d918      	bls.n	8005a8a <USB_ActivateEndpoint+0x296>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <USB_ActivateEndpoint+0x27e>
 8005a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e029      	b.n	8005ade <USB_ActivateEndpoint+0x2ea>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d112      	bne.n	8005ab8 <USB_ActivateEndpoint+0x2c4>
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e012      	b.n	8005ade <USB_ActivateEndpoint+0x2ea>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <USB_ActivateEndpoint+0x2de>
 8005acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ace:	3301      	adds	r3, #1
 8005ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	029b      	lsls	r3, r3, #10
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	847b      	strh	r3, [r7, #34]	; 0x22
 8005aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <USB_ActivateEndpoint+0x33a>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0c:	843b      	strh	r3, [r7, #32]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	8c3b      	ldrh	r3, [r7, #32]
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b44:	83fb      	strh	r3, [r7, #30]
 8005b46:	8bfb      	ldrh	r3, [r7, #30]
 8005b48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b4c:	83fb      	strh	r3, [r7, #30]
 8005b4e:	8bfb      	ldrh	r3, [r7, #30]
 8005b50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b54:	83fb      	strh	r3, [r7, #30]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	8bfb      	ldrh	r3, [r7, #30]
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
 8005b76:	e1c9      	b.n	8005f0c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	78db      	ldrb	r3, [r3, #3]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11e      	bne.n	8005bbe <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
 8005bbc:	e01d      	b.n	8005bfa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c0a:	4413      	add	r3, r2
 8005c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	00da      	lsls	r2, r3, #3
 8005c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	891b      	ldrh	r3, [r3, #8]
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	657b      	str	r3, [r7, #84]	; 0x54
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3e:	4413      	add	r3, r2
 8005c40:	657b      	str	r3, [r7, #84]	; 0x54
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	00da      	lsls	r2, r3, #3
 8005c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	895b      	ldrh	r3, [r3, #10]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 8093 	bne.w	8005d92 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01b      	beq.n	8005cc0 <USB_ActivateEndpoint+0x4cc>
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <USB_ActivateEndpoint+0x51c>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d2e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]
 8005d90:	e0bc      	b.n	8005f0c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01d      	beq.n	8005dea <USB_ActivateEndpoint+0x5f6>
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01d      	beq.n	8005e42 <USB_ActivateEndpoint+0x64e>
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d024      	beq.n	8005e94 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e68:	f083 0320 	eor.w	r3, r3, #32
 8005e6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
 8005e92:	e01d      	b.n	8005ed0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3774      	adds	r7, #116	; 0x74
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b08d      	sub	sp, #52	; 0x34
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 808e 	bne.w	800604c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d044      	beq.n	8005fc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	81bb      	strh	r3, [r7, #12]
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <USB_DeactivateEndpoint+0x6c>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	817b      	strh	r3, [r7, #10]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	813b      	strh	r3, [r7, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	893b      	ldrh	r3, [r7, #8]
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e192      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	827b      	strh	r3, [r7, #18]
 8005fd0:	8a7b      	ldrh	r3, [r7, #18]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <USB_DeactivateEndpoint+0xf6>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	823b      	strh	r3, [r7, #16]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8a3b      	ldrh	r3, [r7, #16]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	81fb      	strh	r3, [r7, #14]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	b29b      	uxth	r3, r3
 8006048:	8013      	strh	r3, [r2, #0]
 800604a:	e14d      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 80a5 	bne.w	80061a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	843b      	strh	r3, [r7, #32]
 8006064:	8c3b      	ldrh	r3, [r7, #32]
 8006066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <USB_DeactivateEndpoint+0x18a>
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	83fb      	strh	r3, [r7, #30]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	83bb      	strh	r3, [r7, #28]
 80060b4:	8bbb      	ldrh	r3, [r7, #28]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <USB_DeactivateEndpoint+0x1da>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	837b      	strh	r3, [r7, #26]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	441a      	add	r2, r3
 80060e0:	8b7b      	ldrh	r3, [r7, #26]
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	833b      	strh	r3, [r7, #24]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8b3b      	ldrh	r3, [r7, #24]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	82fb      	strh	r3, [r7, #22]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8afb      	ldrh	r3, [r7, #22]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	82bb      	strh	r3, [r7, #20]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8abb      	ldrh	r3, [r7, #20]
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
 800619e:	e0a3      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <USB_DeactivateEndpoint+0x2d4>
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <USB_DeactivateEndpoint+0x324>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3734      	adds	r7, #52	; 0x34
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b0c2      	sub	sp, #264	; 0x108
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006304:	6018      	str	r0, [r3, #0]
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b01      	cmp	r3, #1
 800631e:	f040 867b 	bne.w	8007018 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d908      	bls.n	8006350 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800634e:	e007      	b.n	8006360 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	7b1b      	ldrb	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d13a      	bne.n	80063e6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6959      	ldr	r1, [r3, #20]
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	88da      	ldrh	r2, [r3, #6]
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638c:	b29b      	uxth	r3, r3
 800638e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006392:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	f001 fc1d 	bl	8007bd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	00da      	lsls	r2, r3, #3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	f000 bde3 	b.w	8006fac <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78db      	ldrb	r3, [r3, #3]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	f040 843a 	bne.w	8006c6c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	429a      	cmp	r2, r3
 8006412:	f240 83b7 	bls.w	8006b84 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 81b3 	beq.w	800681e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d16d      	bne.n	80065b0 <USB_EPStartXfer+0x2ba>
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	4413      	add	r3, r2
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	00da      	lsls	r2, r3, #3
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	4413      	add	r3, r2
 800650a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006514:	2b3e      	cmp	r3, #62	; 0x3e
 8006516:	d91c      	bls.n	8006552 <USB_EPStartXfer+0x25c>
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <USB_EPStartXfer+0x242>
 800652e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006532:	3b01      	subs	r3, #1
 8006534:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006538:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800653c:	b29b      	uxth	r3, r3
 800653e:	029b      	lsls	r3, r3, #10
 8006540:	b29b      	uxth	r3, r3
 8006542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654a:	b29a      	uxth	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e053      	b.n	80065fa <USB_EPStartXfer+0x304>
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006556:	2b00      	cmp	r3, #0
 8006558:	d112      	bne.n	8006580 <USB_EPStartXfer+0x28a>
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006564:	b29a      	uxth	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006578:	b29a      	uxth	r2, r3
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	e03c      	b.n	80065fa <USB_EPStartXfer+0x304>
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <USB_EPStartXfer+0x2aa>
 8006596:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800659a:	3301      	adds	r3, #1
 800659c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	029b      	lsls	r3, r3, #10
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e024      	b.n	80065fa <USB_EPStartXfer+0x304>
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d11c      	bne.n	80065fa <USB_EPStartXfer+0x304>
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	4413      	add	r3, r2
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
 80065d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	00da      	lsls	r2, r3, #3
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	4413      	add	r3, r2
 80065ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	895b      	ldrh	r3, [r3, #10]
 8006606:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800660a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6959      	ldr	r1, [r3, #20]
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	b29b      	uxth	r3, r3
 800661c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006620:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006624:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006628:	6800      	ldr	r0, [r0, #0]
 800662a:	f001 fad4 	bl	8007bd6 <USB_WritePMA>
            ep->xfer_buff += len;
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	441a      	add	r2, r3
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	429a      	cmp	r2, r3
 8006666:	d90f      	bls.n	8006688 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	621a      	str	r2, [r3, #32]
 8006686:	e00e      	b.n	80066a6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d16d      	bne.n	8006792 <USB_EPStartXfer+0x49c>
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	4413      	add	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	00da      	lsls	r2, r3, #3
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	4413      	add	r3, r2
 80066ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	2b3e      	cmp	r3, #62	; 0x3e
 80066f8:	d91c      	bls.n	8006734 <USB_EPStartXfer+0x43e>
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <USB_EPStartXfer+0x424>
 8006710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006714:	3b01      	subs	r3, #1
 8006716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800671e:	b29b      	uxth	r3, r3
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	b29b      	uxth	r3, r3
 8006724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672c:	b29a      	uxth	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e059      	b.n	80067e8 <USB_EPStartXfer+0x4f2>
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	2b00      	cmp	r3, #0
 800673a:	d112      	bne.n	8006762 <USB_EPStartXfer+0x46c>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006746:	b29a      	uxth	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29a      	uxth	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	e042      	b.n	80067e8 <USB_EPStartXfer+0x4f2>
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <USB_EPStartXfer+0x48c>
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677c:	3301      	adds	r3, #1
 800677e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006786:	b29b      	uxth	r3, r3
 8006788:	029b      	lsls	r3, r3, #10
 800678a:	b29a      	uxth	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	e02a      	b.n	80067e8 <USB_EPStartXfer+0x4f2>
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d122      	bne.n	80067e8 <USB_EPStartXfer+0x4f2>
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067bc:	b29b      	uxth	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	4413      	add	r3, r2
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	00da      	lsls	r2, r3, #3
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	891b      	ldrh	r3, [r3, #8]
 80067f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6959      	ldr	r1, [r3, #20]
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	b29b      	uxth	r3, r3
 800680a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800680e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	f001 f9dd 	bl	8007bd6 <USB_WritePMA>
 800681c:	e3c6      	b.n	8006fac <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d16d      	bne.n	800690a <USB_EPStartXfer+0x614>
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	64bb      	str	r3, [r7, #72]	; 0x48
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006848:	b29b      	uxth	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684e:	4413      	add	r3, r2
 8006850:	64bb      	str	r3, [r7, #72]	; 0x48
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	00da      	lsls	r2, r3, #3
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	4413      	add	r3, r2
 8006864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686e:	2b3e      	cmp	r3, #62	; 0x3e
 8006870:	d91c      	bls.n	80068ac <USB_EPStartXfer+0x5b6>
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <USB_EPStartXfer+0x59c>
 8006888:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800688c:	3b01      	subs	r3, #1
 800688e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006896:	b29b      	uxth	r3, r3
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	b29b      	uxth	r3, r3
 800689c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e059      	b.n	8006960 <USB_EPStartXfer+0x66a>
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d112      	bne.n	80068da <USB_EPStartXfer+0x5e4>
 80068b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e042      	b.n	8006960 <USB_EPStartXfer+0x66a>
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <USB_EPStartXfer+0x604>
 80068f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f4:	3301      	adds	r3, #1
 80068f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29a      	uxth	r2, r3
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e02a      	b.n	8006960 <USB_EPStartXfer+0x66a>
 800690a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d122      	bne.n	8006960 <USB_EPStartXfer+0x66a>
 800691a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693a:	4413      	add	r3, r2
 800693c:	653b      	str	r3, [r7, #80]	; 0x50
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	00da      	lsls	r2, r3, #3
 800694c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694e:	4413      	add	r3, r2
 8006950:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006954:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	b29a      	uxth	r2, r3
 800695c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	891b      	ldrh	r3, [r3, #8]
 800696c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6959      	ldr	r1, [r3, #20]
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006980:	b29b      	uxth	r3, r3
 8006982:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006986:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800698a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800698e:	6800      	ldr	r0, [r0, #0]
 8006990:	f001 f921 	bl	8007bd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a4:	441a      	add	r2, r3
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d90f      	bls.n	80069ee <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80069ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6a1a      	ldr	r2, [r3, #32]
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	621a      	str	r2, [r3, #32]
 80069ec:	e00e      	b.n	8006a0c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d16d      	bne.n	8006b04 <USB_EPStartXfer+0x80e>
 8006a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	4413      	add	r3, r2
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00da      	lsls	r2, r3, #3
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
 8006a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a68:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6a:	d91c      	bls.n	8006aa6 <USB_EPStartXfer+0x7b0>
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <USB_EPStartXfer+0x796>
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	3b01      	subs	r3, #1
 8006a88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e053      	b.n	8006b4e <USB_EPStartXfer+0x858>
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d112      	bne.n	8006ad4 <USB_EPStartXfer+0x7de>
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e03c      	b.n	8006b4e <USB_EPStartXfer+0x858>
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <USB_EPStartXfer+0x7fe>
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aee:	3301      	adds	r3, #1
 8006af0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e024      	b.n	8006b4e <USB_EPStartXfer+0x858>
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d11c      	bne.n	8006b4e <USB_EPStartXfer+0x858>
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b28:	4413      	add	r3, r2
 8006b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	00da      	lsls	r2, r3, #3
 8006b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	895b      	ldrh	r3, [r3, #10]
 8006b5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6959      	ldr	r1, [r3, #20]
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b7c:	6800      	ldr	r0, [r0, #0]
 8006b7e:	f001 f82a 	bl	8007bd6 <USB_WritePMA>
 8006b82:	e213      	b.n	8006fac <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c10:	4413      	add	r3, r2
 8006c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	00da      	lsls	r2, r3, #3
 8006c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	891b      	ldrh	r3, [r3, #8]
 8006c42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6959      	ldr	r1, [r3, #20]
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c64:	6800      	ldr	r0, [r0, #0]
 8006c66:	f000 ffb6 	bl	8007bd6 <USB_WritePMA>
 8006c6a:	e19f      	b.n	8006fac <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80bc 	beq.w	8006e2a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	673b      	str	r3, [r7, #112]	; 0x70
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d16d      	bne.n	8006daa <USB_EPStartXfer+0xab4>
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cee:	4413      	add	r3, r2
 8006cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	00da      	lsls	r2, r3, #3
 8006d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d02:	4413      	add	r3, r2
 8006d04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d08:	667b      	str	r3, [r7, #100]	; 0x64
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d10:	d91c      	bls.n	8006d4c <USB_EPStartXfer+0xa56>
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <USB_EPStartXfer+0xa3c>
 8006d28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e053      	b.n	8006df4 <USB_EPStartXfer+0xafe>
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d112      	bne.n	8006d7a <USB_EPStartXfer+0xa84>
 8006d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	e03c      	b.n	8006df4 <USB_EPStartXfer+0xafe>
 8006d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <USB_EPStartXfer+0xaa4>
 8006d90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d94:	3301      	adds	r3, #1
 8006d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	029b      	lsls	r3, r3, #10
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e024      	b.n	8006df4 <USB_EPStartXfer+0xafe>
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d11c      	bne.n	8006df4 <USB_EPStartXfer+0xafe>
 8006dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dce:	4413      	add	r3, r2
 8006dd0:	673b      	str	r3, [r7, #112]	; 0x70
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	00da      	lsls	r2, r3, #3
 8006de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	895b      	ldrh	r3, [r3, #10]
 8006e00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6959      	ldr	r1, [r3, #20]
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	f000 fed7 	bl	8007bd6 <USB_WritePMA>
 8006e28:	e0c0      	b.n	8006fac <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d16d      	bne.n	8006f16 <USB_EPStartXfer+0xc20>
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5a:	4413      	add	r3, r2
 8006e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	00da      	lsls	r2, r3, #3
 8006e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7c:	d91c      	bls.n	8006eb8 <USB_EPStartXfer+0xbc2>
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USB_EPStartXfer+0xba8>
 8006e94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e05f      	b.n	8006f78 <USB_EPStartXfer+0xc82>
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d112      	bne.n	8006ee6 <USB_EPStartXfer+0xbf0>
 8006ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e048      	b.n	8006f78 <USB_EPStartXfer+0xc82>
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <USB_EPStartXfer+0xc10>
 8006efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f00:	3301      	adds	r3, #1
 8006f02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	e030      	b.n	8006f78 <USB_EPStartXfer+0xc82>
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d128      	bne.n	8006f78 <USB_EPStartXfer+0xc82>
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	00da      	lsls	r2, r3, #3
 8006f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f62:	4413      	add	r3, r2
 8006f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	891b      	ldrh	r3, [r3, #8]
 8006f84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6959      	ldr	r1, [r3, #20]
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fa6:	6800      	ldr	r0, [r0, #0]
 8006fa8:	f000 fe15 	bl	8007bd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd2:	817b      	strh	r3, [r7, #10]
 8006fd4:	897b      	ldrh	r3, [r7, #10]
 8006fd6:	f083 0310 	eor.w	r3, r3, #16
 8006fda:	817b      	strh	r3, [r7, #10]
 8006fdc:	897b      	ldrh	r3, [r7, #10]
 8006fde:	f083 0320 	eor.w	r3, r3, #32
 8006fe2:	817b      	strh	r3, [r7, #10]
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	897b      	ldrh	r3, [r7, #10]
 8007000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007010:	b29b      	uxth	r3, r3
 8007012:	8013      	strh	r3, [r2, #0]
 8007014:	f000 bc9f 	b.w	8007956 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	7b1b      	ldrb	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 80ae 	bne.w	8007186 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800702a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	429a      	cmp	r2, r3
 8007044:	d917      	bls.n	8007076 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	e00e      	b.n	8007094 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070b8:	4413      	add	r3, r2
 80070ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	00da      	lsls	r2, r3, #3
 80070cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070d0:	4413      	add	r3, r2
 80070d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	2b3e      	cmp	r3, #62	; 0x3e
 80070e0:	d91d      	bls.n	800711e <USB_EPStartXfer+0xe28>
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USB_EPStartXfer+0xe0c>
 80070f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e3e1      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	2b00      	cmp	r3, #0
 8007124:	d116      	bne.n	8007154 <USB_EPStartXfer+0xe5e>
 8007126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e3c6      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <USB_EPStartXfer+0xe7e>
 800716a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800716e:	3301      	adds	r3, #1
 8007170:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e3ad      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	78db      	ldrb	r3, [r3, #3]
 8007192:	2b02      	cmp	r3, #2
 8007194:	f040 8200 	bne.w	8007598 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8091 	bne.w	80072cc <USB_EPStartXfer+0xfd6>
 80071aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ce:	4413      	add	r3, r2
 80071d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	00da      	lsls	r2, r3, #3
 80071e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b3e      	cmp	r3, #62	; 0x3e
 80071fe:	d925      	bls.n	800724c <USB_EPStartXfer+0xf56>
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <USB_EPStartXfer+0xf3a>
 8007226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722a:	3b01      	subs	r3, #1
 800722c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e074      	b.n	8007336 <USB_EPStartXfer+0x1040>
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d116      	bne.n	800728a <USB_EPStartXfer+0xf94>
 800725c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007268:	b29a      	uxth	r2, r3
 800726a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007280:	b29a      	uxth	r2, r3
 8007282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007286:	801a      	strh	r2, [r3, #0]
 8007288:	e055      	b.n	8007336 <USB_EPStartXfer+0x1040>
 800728a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <USB_EPStartXfer+0xfc4>
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b4:	3301      	adds	r3, #1
 80072b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	b29b      	uxth	r3, r3
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	e034      	b.n	8007336 <USB_EPStartXfer+0x1040>
 80072cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d12c      	bne.n	8007336 <USB_EPStartXfer+0x1040>
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007300:	4413      	add	r3, r2
 8007302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007318:	4413      	add	r3, r2
 800731a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800731e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8091 	bne.w	8007478 <USB_EPStartXfer+0x1182>
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007372:	b29b      	uxth	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800737a:	4413      	add	r3, r2
 800737c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007392:	4413      	add	r3, r2
 8007394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b3e      	cmp	r3, #62	; 0x3e
 80073aa:	d925      	bls.n	80073f8 <USB_EPStartXfer+0x1102>
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <USB_EPStartXfer+0x10e6>
 80073d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e06d      	b.n	80074d4 <USB_EPStartXfer+0x11de>
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d116      	bne.n	8007436 <USB_EPStartXfer+0x1140>
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007414:	b29a      	uxth	r2, r3
 8007416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742c:	b29a      	uxth	r2, r3
 800742e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e04e      	b.n	80074d4 <USB_EPStartXfer+0x11de>
 8007436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <USB_EPStartXfer+0x1170>
 800745c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007460:	3301      	adds	r3, #1
 8007462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746a:	b29b      	uxth	r3, r3
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e02d      	b.n	80074d4 <USB_EPStartXfer+0x11de>
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d125      	bne.n	80074d4 <USB_EPStartXfer+0x11de>
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007496:	b29b      	uxth	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800749e:	4413      	add	r3, r2
 80074a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	00da      	lsls	r2, r3, #3
 80074b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 81fe 	beq.w	80078e2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007506:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800750a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <USB_EPStartXfer+0x1228>
 8007512:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800751e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 81db 	bne.w	80078e2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800752c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 81d4 	bne.w	80078e2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800753a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
 8007596:	e1a4      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	78db      	ldrb	r3, [r3, #3]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f040 819a 	bne.w	80078de <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d917      	bls.n	80075f6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e6:	1ad2      	subs	r2, r2, r3
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	619a      	str	r2, [r3, #24]
 80075f4:	e00e      	b.n	8007614 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2200      	movs	r2, #0
 8007612:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d178      	bne.n	8007716 <USB_EPStartXfer+0x1420>
 8007624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007648:	4413      	add	r3, r2
 800764a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	00da      	lsls	r2, r3, #3
 800765c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007660:	4413      	add	r3, r2
 8007662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	2b3e      	cmp	r3, #62	; 0x3e
 8007670:	d91d      	bls.n	80076ae <USB_EPStartXfer+0x13b8>
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <USB_EPStartXfer+0x139c>
 8007688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768c:	3b01      	subs	r3, #1
 800768e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007696:	b29b      	uxth	r3, r3
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e064      	b.n	8007778 <USB_EPStartXfer+0x1482>
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d116      	bne.n	80076e4 <USB_EPStartXfer+0x13ee>
 80076b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	e049      	b.n	8007778 <USB_EPStartXfer+0x1482>
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <USB_EPStartXfer+0x140e>
 80076fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29a      	uxth	r2, r3
 800770e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	e030      	b.n	8007778 <USB_EPStartXfer+0x1482>
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d128      	bne.n	8007778 <USB_EPStartXfer+0x1482>
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774a:	4413      	add	r3, r2
 800774c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	00da      	lsls	r2, r3, #3
 800775e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007762:	4413      	add	r3, r2
 8007764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d178      	bne.n	8007888 <USB_EPStartXfer+0x1592>
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077ba:	4413      	add	r3, r2
 80077bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	00da      	lsls	r2, r3, #3
 80077ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e0:	2b3e      	cmp	r3, #62	; 0x3e
 80077e2:	d91d      	bls.n	8007820 <USB_EPStartXfer+0x152a>
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	095b      	lsrs	r3, r3, #5
 80077ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	f003 031f 	and.w	r3, r3, #31
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <USB_EPStartXfer+0x150e>
 80077fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fe:	3b01      	subs	r3, #1
 8007800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29b      	uxth	r3, r3
 800780e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007816:	b29a      	uxth	r2, r3
 8007818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	e060      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007824:	2b00      	cmp	r3, #0
 8007826:	d116      	bne.n	8007856 <USB_EPStartXfer+0x1560>
 8007828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e045      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <USB_EPStartXfer+0x1580>
 800786c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007870:	3301      	adds	r3, #1
 8007872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800787a:	b29b      	uxth	r3, r3
 800787c:	029b      	lsls	r3, r3, #10
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e02c      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d124      	bne.n	80078e2 <USB_EPStartXfer+0x15ec>
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078ae:	4413      	add	r3, r2
 80078b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	00da      	lsls	r2, r3, #3
 80078c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078c6:	4413      	add	r3, r2
 80078c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	e001      	b.n	80078e2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e03a      	b.n	8007958 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800790c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007914:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007918:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800791c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007920:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007952:	b29b      	uxth	r3, r3
 8007954:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d020      	beq.n	80079b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798a:	81bb      	strh	r3, [r7, #12]
 800798c:	89bb      	ldrh	r3, [r7, #12]
 800798e:	f083 0310 	eor.w	r3, r3, #16
 8007992:	81bb      	strh	r3, [r7, #12]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	89bb      	ldrh	r3, [r7, #12]
 80079a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	8013      	strh	r3, [r2, #0]
 80079b4:	e01f      	b.n	80079f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079cc:	81fb      	strh	r3, [r7, #14]
 80079ce:	89fb      	ldrh	r3, [r7, #14]
 80079d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079d4:	81fb      	strh	r3, [r7, #14]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	7b1b      	ldrb	r3, [r3, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 809d 	bne.w	8007b52 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d04c      	beq.n	8007aba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	823b      	strh	r3, [r7, #16]
 8007a2e:	8a3b      	ldrh	r3, [r7, #16]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01b      	beq.n	8007a70 <USB_EPClearStall+0x6c>
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	81fb      	strh	r3, [r7, #14]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	441a      	add	r2, r3
 8007a5a:	89fb      	ldrh	r3, [r7, #14]
 8007a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d06c      	beq.n	8007b52 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8e:	81bb      	strh	r3, [r7, #12]
 8007a90:	89bb      	ldrh	r3, [r7, #12]
 8007a92:	f083 0320 	eor.w	r3, r3, #32
 8007a96:	81bb      	strh	r3, [r7, #12]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	441a      	add	r2, r3
 8007aa2:	89bb      	ldrh	r3, [r7, #12]
 8007aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	8013      	strh	r3, [r2, #0]
 8007ab8:	e04b      	b.n	8007b52 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	82fb      	strh	r3, [r7, #22]
 8007ac8:	8afb      	ldrh	r3, [r7, #22]
 8007aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01b      	beq.n	8007b0a <USB_EPClearStall+0x106>
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae8:	82bb      	strh	r3, [r7, #20]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	8abb      	ldrh	r3, [r7, #20]
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	827b      	strh	r3, [r7, #18]
 8007b22:	8a7b      	ldrh	r3, [r7, #18]
 8007b24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b28:	827b      	strh	r3, [r7, #18]
 8007b2a:	8a7b      	ldrh	r3, [r7, #18]
 8007b2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b30:	827b      	strh	r3, [r7, #18]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	441a      	add	r2, r3
 8007b3c:	8a7b      	ldrh	r3, [r7, #18]
 8007b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b08d      	sub	sp, #52	; 0x34
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4611      	mov	r1, r2
 8007be2:	461a      	mov	r2, r3
 8007be4:	460b      	mov	r3, r1
 8007be6:	80fb      	strh	r3, [r7, #6]
 8007be8:	4613      	mov	r3, r2
 8007bea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007bec:	88bb      	ldrh	r3, [r7, #4]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0c:	e01b      	b.n	8007c46 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	3301      	adds	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	3302      	adds	r3, #2
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	3b01      	subs	r3, #1
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e0      	bne.n	8007c0e <USB_WritePMA+0x38>
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	3734      	adds	r7, #52	; 0x34
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b08b      	sub	sp, #44	; 0x2c
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	4611      	mov	r1, r2
 8007c66:	461a      	mov	r2, r3
 8007c68:	460b      	mov	r3, r1
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c70:	88bb      	ldrh	r3, [r7, #4]
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c90:	e018      	b.n	8007cc4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	3302      	adds	r3, #2
 8007c9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	3301      	adds	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e3      	bne.n	8007c92 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007cca:	88bb      	ldrh	r3, [r7, #4]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	372c      	adds	r7, #44	; 0x2c
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d02:	f002 f91b 	bl	8009f3c <USBD_static_malloc>
 8007d06:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e066      	b.n	8007de8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7c1b      	ldrb	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2e:	2202      	movs	r2, #2
 8007d30:	2181      	movs	r1, #129	; 0x81
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 ffa7 	bl	8009c86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d42:	2202      	movs	r2, #2
 8007d44:	2101      	movs	r1, #1
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 ff9d 	bl	8009c86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2210      	movs	r2, #16
 8007d58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d5c:	e016      	b.n	8007d8c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d5e:	2340      	movs	r3, #64	; 0x40
 8007d60:	2202      	movs	r2, #2
 8007d62:	2181      	movs	r1, #129	; 0x81
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 ff8e 	bl	8009c86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d70:	2340      	movs	r3, #64	; 0x40
 8007d72:	2202      	movs	r2, #2
 8007d74:	2101      	movs	r1, #1
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 ff85 	bl	8009c86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2210      	movs	r2, #16
 8007d88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	2203      	movs	r2, #3
 8007d90:	2182      	movs	r1, #130	; 0x82
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 ff77 	bl	8009c86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7c1b      	ldrb	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dcc:	2101      	movs	r1, #1
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f002 f849 	bl	8009e66 <USBD_LL_PrepareReceive>
 8007dd4:	e007      	b.n	8007de6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f002 f840 	bl	8009e66 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007dfc:	2181      	movs	r1, #129	; 0x81
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 ff67 	bl	8009cd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 ff60 	bl	8009cd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e1a:	2182      	movs	r1, #130	; 0x82
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 ff58 	bl	8009cd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00e      	beq.n	8007e5a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f002 f883 	bl	8009f58 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e0af      	b.n	8007fec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d03f      	beq.n	8007f18 <USBD_CDC_Setup+0xb4>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	f040 809f 	bne.w	8007fdc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	88db      	ldrh	r3, [r3, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d02e      	beq.n	8007f04 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	da16      	bge.n	8007ede <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ebc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	88d2      	ldrh	r2, [r2, #6]
 8007ec2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	88db      	ldrh	r3, [r3, #6]
 8007ec8:	2b07      	cmp	r3, #7
 8007eca:	bf28      	it	cs
 8007ecc:	2307      	movcs	r3, #7
 8007ece:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	89fa      	ldrh	r2, [r7, #14]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 facf 	bl	800947a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007edc:	e085      	b.n	8007fea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	785a      	ldrb	r2, [r3, #1]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	88db      	ldrh	r3, [r3, #6]
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ef4:	6939      	ldr	r1, [r7, #16]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fae8 	bl	80094d2 <USBD_CtlPrepareRx>
      break;
 8007f02:	e072      	b.n	8007fea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	7850      	ldrb	r0, [r2, #1]
 8007f10:	2200      	movs	r2, #0
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	4798      	blx	r3
      break;
 8007f16:	e068      	b.n	8007fea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b0b      	cmp	r3, #11
 8007f1e:	d852      	bhi.n	8007fc6 <USBD_CDC_Setup+0x162>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USBD_CDC_Setup+0xc4>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f59 	.word	0x08007f59
 8007f2c:	08007fd5 	.word	0x08007fd5
 8007f30:	08007fc7 	.word	0x08007fc7
 8007f34:	08007fc7 	.word	0x08007fc7
 8007f38:	08007fc7 	.word	0x08007fc7
 8007f3c:	08007fc7 	.word	0x08007fc7
 8007f40:	08007fc7 	.word	0x08007fc7
 8007f44:	08007fc7 	.word	0x08007fc7
 8007f48:	08007fc7 	.word	0x08007fc7
 8007f4c:	08007fc7 	.word	0x08007fc7
 8007f50:	08007f83 	.word	0x08007f83
 8007f54:	08007fad 	.word	0x08007fad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d107      	bne.n	8007f74 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f64:	f107 030a 	add.w	r3, r7, #10
 8007f68:	2202      	movs	r2, #2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fa84 	bl	800947a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f72:	e032      	b.n	8007fda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 fa0e 	bl	8009398 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f80:	e02b      	b.n	8007fda <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d107      	bne.n	8007f9e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f8e:	f107 030d 	add.w	r3, r7, #13
 8007f92:	2201      	movs	r2, #1
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fa6f 	bl	800947a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f9c:	e01d      	b.n	8007fda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f9f9 	bl	8009398 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8007faa:	e016      	b.n	8007fda <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d00f      	beq.n	8007fd8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 f9ec 	bl	8009398 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fc4:	e008      	b.n	8007fd8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f9e5 	bl	8009398 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd2:	e002      	b.n	8007fda <USBD_CDC_Setup+0x176>
          break;
 8007fd4:	bf00      	nop
 8007fd6:	e008      	b.n	8007fea <USBD_CDC_Setup+0x186>
          break;
 8007fd8:	bf00      	nop
      }
      break;
 8007fda:	e006      	b.n	8007fea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f9da 	bl	8009398 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008006:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	e04f      	b.n	80080b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800801c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	3318      	adds	r3, #24
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d029      	beq.n	8008088 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	3318      	adds	r3, #24
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	78f9      	ldrb	r1, [r7, #3]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	460b      	mov	r3, r1
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4403      	add	r3, r0
 8008054:	3338      	adds	r3, #56	; 0x38
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	fbb2 f1f3 	udiv	r1, r2, r3
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008062:	2b00      	cmp	r3, #0
 8008064:	d110      	bne.n	8008088 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	3318      	adds	r3, #24
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800807a:	78f9      	ldrb	r1, [r7, #3]
 800807c:	2300      	movs	r3, #0
 800807e:	2200      	movs	r2, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fecf 	bl	8009e24 <USBD_LL_Transmit>
 8008086:	e015      	b.n	80080b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080b0:	78fa      	ldrb	r2, [r7, #3]
 80080b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080dc:	2303      	movs	r3, #3
 80080de:	e015      	b.n	800810c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fedf 	bl	8009ea8 <USBD_LL_GetRxDataSize>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008106:	4611      	mov	r1, r2
 8008108:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008122:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e01b      	b.n	8008166 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d015      	beq.n	8008164 <USBD_CDC_EP0_RxReady+0x50>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800813e:	2bff      	cmp	r3, #255	; 0xff
 8008140:	d010      	beq.n	8008164 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008150:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008158:	b292      	uxth	r2, r2
 800815a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2243      	movs	r2, #67	; 0x43
 800817c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800817e:	4b03      	ldr	r3, [pc, #12]	; (800818c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000094 	.word	0x20000094

08008190 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2243      	movs	r2, #67	; 0x43
 800819c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	20000050 	.word	0x20000050

080081b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2243      	movs	r2, #67	; 0x43
 80081bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	200000d8 	.word	0x200000d8

080081d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220a      	movs	r2, #10
 80081dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	2000000c 	.word	0x2000000c

080081f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e004      	b.n	800820e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800821a:	b480      	push	{r7}
 800821c:	b087      	sub	sp, #28
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800822c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	e008      	b.n	800824a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008266:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e004      	b.n	800827c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008296:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e01a      	b.n	80082e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d114      	bne.n	80082de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80082d2:	2181      	movs	r1, #129	; 0x81
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fda5 	bl	8009e24 <USBD_LL_Transmit>

    ret = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	e016      	b.n	8008334 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7c1b      	ldrb	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008318:	2101      	movs	r1, #1
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fda3 	bl	8009e66 <USBD_LL_PrepareReceive>
 8008320:	e007      	b.n	8008332 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	2101      	movs	r1, #1
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fd9a 	bl	8009e66 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	e01f      	b.n	8008394 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	79fa      	ldrb	r2, [r7, #7]
 8008386:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f001 fc01 	bl	8009b90 <USBD_LL_Init>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e016      	b.n	80083e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	f107 020e 	add.w	r2, r7, #14
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	4602      	mov	r2, r0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fc2c 	bl	8009c50 <USBD_LL_Start>
 80083f8:	4603      	mov	r3, r0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	4611      	mov	r1, r2
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
  }

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 ff46 	bl	8009324 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d01a      	beq.n	80084f2 <USBD_LL_SetupStage+0x72>
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d822      	bhi.n	8008506 <USBD_LL_SetupStage+0x86>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <USBD_LL_SetupStage+0x4a>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d00a      	beq.n	80084de <USBD_LL_SetupStage+0x5e>
 80084c8:	e01d      	b.n	8008506 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9ee 	bl	80088b4 <USBD_StdDevReq>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e020      	b.n	8008520 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa52 	bl	8008990 <USBD_StdItfReq>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e016      	b.n	8008520 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa91 	bl	8008a22 <USBD_StdEPReq>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
      break;
 8008504:	e00c      	b.n	8008520 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800850c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fbfb 	bl	8009d10 <USBD_LL_StallEP>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
      break;
 800851e:	bf00      	nop
  }

  return ret;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b086      	sub	sp, #24
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	460b      	mov	r3, r1
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d138      	bne.n	80085b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008544:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854c:	2b03      	cmp	r3, #3
 800854e:	d14a      	bne.n	80085e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	429a      	cmp	r2, r3
 800855a:	d913      	bls.n	8008584 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	4293      	cmp	r3, r2
 8008574:	bf28      	it	cs
 8008576:	4613      	movcs	r3, r2
 8008578:	461a      	mov	r2, r3
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 ffc5 	bl	800950c <USBD_CtlContinueRx>
 8008582:	e030      	b.n	80085e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d10b      	bne.n	80085a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 ffc0 	bl	800952e <USBD_CtlSendStatus>
 80085ae:	e01a      	b.n	80085e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d114      	bne.n	80085e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00e      	beq.n	80085e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	7afa      	ldrb	r2, [r7, #11]
 80085d2:	4611      	mov	r1, r2
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	4798      	blx	r3
 80085d8:	4603      	mov	r3, r0
 80085da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	e000      	b.n	80085e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	460b      	mov	r3, r1
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d16b      	bne.n	80086dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3314      	adds	r3, #20
 8008608:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008610:	2b02      	cmp	r3, #2
 8008612:	d156      	bne.n	80086c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	429a      	cmp	r2, r3
 800861e:	d914      	bls.n	800864a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	1ad2      	subs	r2, r2, r3
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	461a      	mov	r2, r3
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 ff3a 	bl	80094b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800863c:	2300      	movs	r3, #0
 800863e:	2200      	movs	r2, #0
 8008640:	2100      	movs	r1, #0
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f001 fc0f 	bl	8009e66 <USBD_LL_PrepareReceive>
 8008648:	e03b      	b.n	80086c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d11c      	bne.n	8008690 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800865e:	429a      	cmp	r2, r3
 8008660:	d316      	bcc.n	8008690 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800866c:	429a      	cmp	r2, r3
 800866e:	d20f      	bcs.n	8008690 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 ff1b 	bl	80094b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008682:	2300      	movs	r3, #0
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f001 fbec 	bl	8009e66 <USBD_LL_PrepareReceive>
 800868e:	e018      	b.n	80086c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d10b      	bne.n	80086b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086b4:	2180      	movs	r1, #128	; 0x80
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f001 fb2a 	bl	8009d10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 ff49 	bl	8009554 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d122      	bne.n	8008712 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fe98 	bl	8008402 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086da:	e01a      	b.n	8008712 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d114      	bne.n	8008712 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	7afa      	ldrb	r2, [r7, #11]
 80086fe:	4611      	mov	r1, r2
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	4798      	blx	r3
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	e000      	b.n	8008714 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	e02f      	b.n	80087b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00f      	beq.n	800877a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6852      	ldr	r2, [r2, #4]
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	4611      	mov	r1, r2
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	2200      	movs	r2, #0
 800877e:	2100      	movs	r1, #0
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fa80 	bl	8009c86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2240      	movs	r2, #64	; 0x40
 8008792:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	2200      	movs	r2, #0
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 fa72 	bl	8009c86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2240      	movs	r2, #64	; 0x40
 80087ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2204      	movs	r2, #4
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b04      	cmp	r3, #4
 8008816:	d106      	bne.n	8008826 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800881e:	b2da      	uxtb	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	e012      	b.n	8008870 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d10b      	bne.n	800886e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	3301      	adds	r3, #1
 800888e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008896:	8a3b      	ldrh	r3, [r7, #16]
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	b21a      	sxth	r2, r3
 800889c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	b21b      	sxth	r3, r3
 80088a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088a6:	89fb      	ldrh	r3, [r7, #14]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d005      	beq.n	80088da <USBD_StdDevReq+0x26>
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d853      	bhi.n	800897a <USBD_StdDevReq+0xc6>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <USBD_StdDevReq+0x3a>
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d14f      	bne.n	800897a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]
      break;
 80088ec:	e04a      	b.n	8008984 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	2b09      	cmp	r3, #9
 80088f4:	d83b      	bhi.n	800896e <USBD_StdDevReq+0xba>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <USBD_StdDevReq+0x48>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008951 	.word	0x08008951
 8008900:	08008965 	.word	0x08008965
 8008904:	0800896f 	.word	0x0800896f
 8008908:	0800895b 	.word	0x0800895b
 800890c:	0800896f 	.word	0x0800896f
 8008910:	0800892f 	.word	0x0800892f
 8008914:	08008925 	.word	0x08008925
 8008918:	0800896f 	.word	0x0800896f
 800891c:	08008947 	.word	0x08008947
 8008920:	08008939 	.word	0x08008939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9de 	bl	8008ce8 <USBD_GetDescriptor>
          break;
 800892c:	e024      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fb6d 	bl	8009010 <USBD_SetAddress>
          break;
 8008936:	e01f      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fbac 	bl	8009098 <USBD_SetConfig>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
          break;
 8008944:	e018      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fc4b 	bl	80091e4 <USBD_GetConfig>
          break;
 800894e:	e013      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fc7c 	bl	8009250 <USBD_GetStatus>
          break;
 8008958:	e00e      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fcab 	bl	80092b8 <USBD_SetFeature>
          break;
 8008962:	e009      	b.n	8008978 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fcba 	bl	80092e0 <USBD_ClrFeature>
          break;
 800896c:	e004      	b.n	8008978 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fd11 	bl	8009398 <USBD_CtlError>
          break;
 8008976:	bf00      	nop
      }
      break;
 8008978:	e004      	b.n	8008984 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fd0b 	bl	8009398 <USBD_CtlError>
      break;
 8008982:	bf00      	nop
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop

08008990 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d005      	beq.n	80089b6 <USBD_StdItfReq+0x26>
 80089aa:	2b40      	cmp	r3, #64	; 0x40
 80089ac:	d82f      	bhi.n	8008a0e <USBD_StdItfReq+0x7e>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <USBD_StdItfReq+0x26>
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d12b      	bne.n	8008a0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d81d      	bhi.n	8008a00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	889b      	ldrh	r3, [r3, #4]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d813      	bhi.n	80089f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	88db      	ldrh	r3, [r3, #6]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d110      	bne.n	8008a0a <USBD_StdItfReq+0x7a>
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10d      	bne.n	8008a0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fd9d 	bl	800952e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089f4:	e009      	b.n	8008a0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fccd 	bl	8009398 <USBD_CtlError>
          break;
 80089fe:	e004      	b.n	8008a0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fcc8 	bl	8009398 <USBD_CtlError>
          break;
 8008a08:	e000      	b.n	8008a0c <USBD_StdItfReq+0x7c>
          break;
 8008a0a:	bf00      	nop
      }
      break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fcc1 	bl	8009398 <USBD_CtlError>
      break;
 8008a16:	bf00      	nop
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	889b      	ldrh	r3, [r3, #4]
 8008a34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d007      	beq.n	8008a52 <USBD_StdEPReq+0x30>
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	f200 8145 	bhi.w	8008cd2 <USBD_StdEPReq+0x2b0>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00c      	beq.n	8008a66 <USBD_StdEPReq+0x44>
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	f040 8140 	bne.w	8008cd2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4798      	blx	r3
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
      break;
 8008a64:	e13a      	b.n	8008cdc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d007      	beq.n	8008a7e <USBD_StdEPReq+0x5c>
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	f300 8129 	bgt.w	8008cc6 <USBD_StdEPReq+0x2a4>
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d07f      	beq.n	8008b78 <USBD_StdEPReq+0x156>
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d03c      	beq.n	8008af6 <USBD_StdEPReq+0xd4>
 8008a7c:	e123      	b.n	8008cc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d002      	beq.n	8008a90 <USBD_StdEPReq+0x6e>
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d016      	beq.n	8008abc <USBD_StdEPReq+0x9a>
 8008a8e:	e02c      	b.n	8008aea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <USBD_StdEPReq+0x90>
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d00a      	beq.n	8008ab2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 f935 	bl	8009d10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa6:	2180      	movs	r1, #128	; 0x80
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 f931 	bl	8009d10 <USBD_LL_StallEP>
 8008aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ab0:	e020      	b.n	8008af4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fc6f 	bl	8009398 <USBD_CtlError>
              break;
 8008aba:	e01b      	b.n	8008af4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	885b      	ldrh	r3, [r3, #2]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10e      	bne.n	8008ae2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <USBD_StdEPReq+0xc0>
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b80      	cmp	r3, #128	; 0x80
 8008ace:	d008      	beq.n	8008ae2 <USBD_StdEPReq+0xc0>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	88db      	ldrh	r3, [r3, #6]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f917 	bl	8009d10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fd23 	bl	800952e <USBD_CtlSendStatus>

              break;
 8008ae8:	e004      	b.n	8008af4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc53 	bl	8009398 <USBD_CtlError>
              break;
 8008af2:	bf00      	nop
          }
          break;
 8008af4:	e0ec      	b.n	8008cd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d002      	beq.n	8008b08 <USBD_StdEPReq+0xe6>
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d016      	beq.n	8008b34 <USBD_StdEPReq+0x112>
 8008b06:	e030      	b.n	8008b6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <USBD_StdEPReq+0x108>
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b80      	cmp	r3, #128	; 0x80
 8008b12:	d00a      	beq.n	8008b2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 f8f9 	bl	8009d10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b1e:	2180      	movs	r1, #128	; 0x80
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f8f5 	bl	8009d10 <USBD_LL_StallEP>
 8008b26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b28:	e025      	b.n	8008b76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc33 	bl	8009398 <USBD_CtlError>
              break;
 8008b32:	e020      	b.n	8008b76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	885b      	ldrh	r3, [r3, #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11b      	bne.n	8008b74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 f8ff 	bl	8009d4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fcec 	bl	800952e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	4798      	blx	r3
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008b68:	e004      	b.n	8008b74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc13 	bl	8009398 <USBD_CtlError>
              break;
 8008b72:	e000      	b.n	8008b76 <USBD_StdEPReq+0x154>
              break;
 8008b74:	bf00      	nop
          }
          break;
 8008b76:	e0ab      	b.n	8008cd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d002      	beq.n	8008b8a <USBD_StdEPReq+0x168>
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d032      	beq.n	8008bee <USBD_StdEPReq+0x1cc>
 8008b88:	e097      	b.n	8008cba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <USBD_StdEPReq+0x17e>
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d004      	beq.n	8008ba0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbfd 	bl	8009398 <USBD_CtlError>
                break;
 8008b9e:	e091      	b.n	8008cc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da0b      	bge.n	8008bc0 <USBD_StdEPReq+0x19e>
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	3310      	adds	r3, #16
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	e00b      	b.n	8008bd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2202      	movs	r2, #2
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fc47 	bl	800947a <USBD_CtlSendData>
              break;
 8008bec:	e06a      	b.n	8008cc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	da11      	bge.n	8008c1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	f003 020f 	and.w	r2, r3, #15
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3324      	adds	r3, #36	; 0x24
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d117      	bne.n	8008c40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fbc0 	bl	8009398 <USBD_CtlError>
                  break;
 8008c18:	e054      	b.n	8008cc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	f003 020f 	and.w	r2, r3, #15
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fbad 	bl	8009398 <USBD_CtlError>
                  break;
 8008c3e:	e041      	b.n	8008cc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da0b      	bge.n	8008c60 <USBD_StdEPReq+0x23e>
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	3310      	adds	r3, #16
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	e00b      	b.n	8008c78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	3304      	adds	r3, #4
 8008c78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <USBD_StdEPReq+0x264>
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d103      	bne.n	8008c8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e00e      	b.n	8008cac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 f87a 	bl	8009d8c <USBD_LL_IsStallEP>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e002      	b.n	8008cac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fbe1 	bl	800947a <USBD_CtlSendData>
              break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fb6b 	bl	8009398 <USBD_CtlError>
              break;
 8008cc2:	bf00      	nop
          }
          break;
 8008cc4:	e004      	b.n	8008cd0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fb65 	bl	8009398 <USBD_CtlError>
          break;
 8008cce:	bf00      	nop
      }
      break;
 8008cd0:	e004      	b.n	8008cdc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb5f 	bl	8009398 <USBD_CtlError>
      break;
 8008cda:	bf00      	nop
  }

  return ret;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b0e      	cmp	r3, #14
 8008d0a:	f200 8152 	bhi.w	8008fb2 <USBD_GetDescriptor+0x2ca>
 8008d0e:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <USBD_GetDescriptor+0x2c>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d85 	.word	0x08008d85
 8008d18:	08008d9d 	.word	0x08008d9d
 8008d1c:	08008ddd 	.word	0x08008ddd
 8008d20:	08008fb3 	.word	0x08008fb3
 8008d24:	08008fb3 	.word	0x08008fb3
 8008d28:	08008f53 	.word	0x08008f53
 8008d2c:	08008f7f 	.word	0x08008f7f
 8008d30:	08008fb3 	.word	0x08008fb3
 8008d34:	08008fb3 	.word	0x08008fb3
 8008d38:	08008fb3 	.word	0x08008fb3
 8008d3c:	08008fb3 	.word	0x08008fb3
 8008d40:	08008fb3 	.word	0x08008fb3
 8008d44:	08008fb3 	.word	0x08008fb3
 8008d48:	08008fb3 	.word	0x08008fb3
 8008d4c:	08008d51 	.word	0x08008d51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	7c12      	ldrb	r2, [r2, #16]
 8008d68:	f107 0108 	add.w	r1, r7, #8
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4798      	blx	r3
 8008d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d72:	e126      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fb0e 	bl	8009398 <USBD_CtlError>
        err++;
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	72fb      	strb	r3, [r7, #11]
      break;
 8008d82:	e11e      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
      break;
 8008d9a:	e112      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7c1b      	ldrb	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10d      	bne.n	8008dc0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	f107 0208 	add.w	r2, r7, #8
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	2202      	movs	r2, #2
 8008dbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dbe:	e100      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	f107 0208 	add.w	r2, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	701a      	strb	r2, [r3, #0]
      break;
 8008dda:	e0f2      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	885b      	ldrh	r3, [r3, #2]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	f200 80ac 	bhi.w	8008f40 <USBD_GetDescriptor+0x258>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_GetDescriptor+0x108>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e3d 	.word	0x08008e3d
 8008df8:	08008e71 	.word	0x08008e71
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ed9 	.word	0x08008ed9
 8008e04:	08008f0d 	.word	0x08008f0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 0108 	add.w	r1, r7, #8
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2a:	e091      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fab2 	bl	8009398 <USBD_CtlError>
            err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3a:	e089      	b.n	8008f50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 0108 	add.w	r1, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5e:	e077      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa98 	bl	8009398 <USBD_CtlError>
            err++;
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6e:	e06f      	b.n	8008f50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e92:	e05d      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa7e 	bl	8009398 <USBD_CtlError>
            err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea2:	e055      	b.n	8008f50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7c12      	ldrb	r2, [r2, #16]
 8008ebc:	f107 0108 	add.w	r1, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec6:	e043      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa64 	bl	8009398 <USBD_CtlError>
            err++;
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed6:	e03b      	b.n	8008f50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efa:	e029      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa4a 	bl	8009398 <USBD_CtlError>
            err++;
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	3301      	adds	r3, #1
 8008f08:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0a:	e021      	b.n	8008f50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	7c12      	ldrb	r2, [r2, #16]
 8008f24:	f107 0108 	add.w	r1, r7, #8
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4798      	blx	r3
 8008f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f2e:	e00f      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa30 	bl	8009398 <USBD_CtlError>
            err++;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f3e:	e007      	b.n	8008f50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa28 	bl	8009398 <USBD_CtlError>
          err++;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008f4e:	bf00      	nop
      }
      break;
 8008f50:	e037      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7c1b      	ldrb	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f62:	f107 0208 	add.w	r2, r7, #8
 8008f66:	4610      	mov	r0, r2
 8008f68:	4798      	blx	r3
 8008f6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f6c:	e029      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fa11 	bl	8009398 <USBD_CtlError>
        err++;
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f7c:	e021      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7c1b      	ldrb	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f107 0208 	add.w	r2, r7, #8
 8008f92:	4610      	mov	r0, r2
 8008f94:	4798      	blx	r3
 8008f96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa0:	e00f      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9f7 	bl	8009398 <USBD_CtlError>
        err++;
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	3301      	adds	r3, #1
 8008fae:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb0:	e007      	b.n	8008fc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f9ef 	bl	8009398 <USBD_CtlError>
      err++;
 8008fba:	7afb      	ldrb	r3, [r7, #11]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc0:	bf00      	nop
  }

  if (err != 0U)
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d11e      	bne.n	8009006 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	88db      	ldrh	r3, [r3, #6]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d016      	beq.n	8008ffe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008fd0:	893b      	ldrh	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88da      	ldrh	r2, [r3, #6]
 8008fda:	893b      	ldrh	r3, [r7, #8]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	bf28      	it	cs
 8008fe0:	4613      	movcs	r3, r2
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fe6:	893b      	ldrh	r3, [r7, #8]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa44 	bl	800947a <USBD_CtlSendData>
 8008ff2:	e009      	b.n	8009008 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9ce 	bl	8009398 <USBD_CtlError>
 8008ffc:	e004      	b.n	8009008 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa95 	bl	800952e <USBD_CtlSendStatus>
 8009004:	e000      	b.n	8009008 <USBD_GetDescriptor+0x320>
    return;
 8009006:	bf00      	nop
  }
}
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop

08009010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	889b      	ldrh	r3, [r3, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d131      	bne.n	8009086 <USBD_SetAddress+0x76>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d12d      	bne.n	8009086 <USBD_SetAddress+0x76>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	885b      	ldrh	r3, [r3, #2]
 800902e:	2b7f      	cmp	r3, #127	; 0x7f
 8009030:	d829      	bhi.n	8009086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800903c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b03      	cmp	r3, #3
 8009048:	d104      	bne.n	8009054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f9a3 	bl	8009398 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009052:	e01d      	b.n	8009090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7bfa      	ldrb	r2, [r7, #15]
 8009058:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fec0 	bl	8009de6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa61 	bl	800952e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907a:	e009      	b.n	8009090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009084:	e004      	b.n	8009090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f985 	bl	8009398 <USBD_CtlError>
  }
}
 800908e:	bf00      	nop
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	885b      	ldrh	r3, [r3, #2]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	4b4c      	ldr	r3, [pc, #304]	; (80091e0 <USBD_SetConfig+0x148>)
 80090ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b0:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <USBD_SetConfig+0x148>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d905      	bls.n	80090c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f96c 	bl	8009398 <USBD_CtlError>
    return USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e088      	b.n	80091d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d002      	beq.n	80090d6 <USBD_SetConfig+0x3e>
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d025      	beq.n	8009120 <USBD_SetConfig+0x88>
 80090d4:	e071      	b.n	80091ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090d6:	4b42      	ldr	r3, [pc, #264]	; (80091e0 <USBD_SetConfig+0x148>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01c      	beq.n	8009118 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80090de:	4b40      	ldr	r3, [pc, #256]	; (80091e0 <USBD_SetConfig+0x148>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090e8:	4b3d      	ldr	r3, [pc, #244]	; (80091e0 <USBD_SetConfig+0x148>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff f992 	bl	8008418 <USBD_SetClassConfig>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f949 	bl	8009398 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009106:	e065      	b.n	80091d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa10 	bl	800952e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2203      	movs	r2, #3
 8009112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009116:	e05d      	b.n	80091d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa08 	bl	800952e <USBD_CtlSendStatus>
      break;
 800911e:	e059      	b.n	80091d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009120:	4b2f      	ldr	r3, [pc, #188]	; (80091e0 <USBD_SetConfig+0x148>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d112      	bne.n	800914e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009130:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <USBD_SetConfig+0x148>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800913a:	4b29      	ldr	r3, [pc, #164]	; (80091e0 <USBD_SetConfig+0x148>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff f985 	bl	8008450 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9f1 	bl	800952e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800914c:	e042      	b.n	80091d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800914e:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <USBD_SetConfig+0x148>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d02a      	beq.n	80091b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff f973 	bl	8008450 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800916a:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <USBD_SetConfig+0x148>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009174:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <USBD_SetConfig+0x148>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff f94c 	bl	8008418 <USBD_SetClassConfig>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00f      	beq.n	80091aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f903 	bl	8009398 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff f958 	bl	8008450 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091a8:	e014      	b.n	80091d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9bf 	bl	800952e <USBD_CtlSendStatus>
      break;
 80091b0:	e010      	b.n	80091d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9bb 	bl	800952e <USBD_CtlSendStatus>
      break;
 80091b8:	e00c      	b.n	80091d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8eb 	bl	8009398 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091c2:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <USBD_SetConfig+0x148>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff f941 	bl	8008450 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091ce:	2303      	movs	r3, #3
 80091d0:	73fb      	strb	r3, [r7, #15]
      break;
 80091d2:	bf00      	nop
  }

  return ret;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	200003c4 	.word	0x200003c4

080091e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	88db      	ldrh	r3, [r3, #6]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d004      	beq.n	8009200 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f8cd 	bl	8009398 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091fe:	e023      	b.n	8009248 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	dc02      	bgt.n	8009212 <USBD_GetConfig+0x2e>
 800920c:	2b00      	cmp	r3, #0
 800920e:	dc03      	bgt.n	8009218 <USBD_GetConfig+0x34>
 8009210:	e015      	b.n	800923e <USBD_GetConfig+0x5a>
 8009212:	2b03      	cmp	r3, #3
 8009214:	d00b      	beq.n	800922e <USBD_GetConfig+0x4a>
 8009216:	e012      	b.n	800923e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3308      	adds	r3, #8
 8009222:	2201      	movs	r2, #1
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f927 	bl	800947a <USBD_CtlSendData>
        break;
 800922c:	e00c      	b.n	8009248 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3304      	adds	r3, #4
 8009232:	2201      	movs	r2, #1
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f91f 	bl	800947a <USBD_CtlSendData>
        break;
 800923c:	e004      	b.n	8009248 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f8a9 	bl	8009398 <USBD_CtlError>
        break;
 8009246:	bf00      	nop
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009260:	b2db      	uxtb	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	2b02      	cmp	r3, #2
 8009266:	d81e      	bhi.n	80092a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	88db      	ldrh	r3, [r3, #6]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d004      	beq.n	800927a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f890 	bl	8009398 <USBD_CtlError>
        break;
 8009278:	e01a      	b.n	80092b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f043 0202 	orr.w	r2, r3, #2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	330c      	adds	r3, #12
 800929a:	2202      	movs	r2, #2
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8eb 	bl	800947a <USBD_CtlSendData>
      break;
 80092a4:	e004      	b.n	80092b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f875 	bl	8009398 <USBD_CtlError>
      break;
 80092ae:	bf00      	nop
  }
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	885b      	ldrh	r3, [r3, #2]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d106      	bne.n	80092d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f92b 	bl	800952e <USBD_CtlSendStatus>
  }
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d80b      	bhi.n	8009310 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d10c      	bne.n	800931a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f910 	bl	800952e <USBD_CtlSendStatus>
      }
      break;
 800930e:	e004      	b.n	800931a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f840 	bl	8009398 <USBD_CtlError>
      break;
 8009318:	e000      	b.n	800931c <USBD_ClrFeature+0x3c>
      break;
 800931a:	bf00      	nop
  }
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fa92 	bl	8008878 <SWAPBYTE>
 8009354:	4603      	mov	r3, r0
 8009356:	461a      	mov	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3301      	adds	r3, #1
 8009366:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff fa85 	bl	8008878 <SWAPBYTE>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fa78 	bl	8008878 <SWAPBYTE>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	80da      	strh	r2, [r3, #6]
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093a2:	2180      	movs	r1, #128	; 0x80
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fcb3 	bl	8009d10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093aa:	2100      	movs	r1, #0
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fcaf 	bl	8009d10 <USBD_LL_StallEP>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b086      	sub	sp, #24
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d036      	beq.n	800943e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093d4:	6938      	ldr	r0, [r7, #16]
 80093d6:	f000 f836 	bl	8009446 <USBD_GetLen>
 80093da:	4603      	mov	r3, r0
 80093dc:	3301      	adds	r3, #1
 80093de:	b29b      	uxth	r3, r3
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4413      	add	r3, r2
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	3301      	adds	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4413      	add	r3, r2
 8009400:	2203      	movs	r2, #3
 8009402:	701a      	strb	r2, [r3, #0]
  idx++;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	3301      	adds	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800940a:	e013      	b.n	8009434 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3301      	adds	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
    idx++;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	3301      	adds	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4413      	add	r3, r2
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
    idx++;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	3301      	adds	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e7      	bne.n	800940c <USBD_GetString+0x52>
 800943c:	e000      	b.n	8009440 <USBD_GetString+0x86>
    return;
 800943e:	bf00      	nop
  }
}
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009456:	e005      	b.n	8009464 <USBD_GetLen+0x1e>
  {
    len++;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	3301      	adds	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	3301      	adds	r3, #1
 8009462:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f5      	bne.n	8009458 <USBD_GetLen+0x12>
  }

  return len;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2202      	movs	r2, #2
 800948a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	2100      	movs	r1, #0
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fcbf 	bl	8009e24 <USBD_LL_Transmit>

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fcae 	bl	8009e24 <USBD_LL_Transmit>

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2203      	movs	r2, #3
 80094e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	2100      	movs	r1, #0
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 fcb2 	bl	8009e66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fca1 	bl	8009e66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2204      	movs	r2, #4
 800953a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800953e:	2300      	movs	r3, #0
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fc6d 	bl	8009e24 <USBD_LL_Transmit>

  return USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2205      	movs	r2, #5
 8009560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009564:	2300      	movs	r3, #0
 8009566:	2200      	movs	r2, #0
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc7b 	bl	8009e66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009580:	2200      	movs	r2, #0
 8009582:	4912      	ldr	r1, [pc, #72]	; (80095cc <MX_USB_Device_Init+0x50>)
 8009584:	4812      	ldr	r0, [pc, #72]	; (80095d0 <MX_USB_Device_Init+0x54>)
 8009586:	f7fe fed9 	bl	800833c <USBD_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009590:	f7f7 fb1c 	bl	8000bcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009594:	490f      	ldr	r1, [pc, #60]	; (80095d4 <MX_USB_Device_Init+0x58>)
 8009596:	480e      	ldr	r0, [pc, #56]	; (80095d0 <MX_USB_Device_Init+0x54>)
 8009598:	f7fe ff00 	bl	800839c <USBD_RegisterClass>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80095a2:	f7f7 fb13 	bl	8000bcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80095a6:	490c      	ldr	r1, [pc, #48]	; (80095d8 <MX_USB_Device_Init+0x5c>)
 80095a8:	4809      	ldr	r0, [pc, #36]	; (80095d0 <MX_USB_Device_Init+0x54>)
 80095aa:	f7fe fe21 	bl	80081f0 <USBD_CDC_RegisterInterface>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80095b4:	f7f7 fb0a 	bl	8000bcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80095b8:	4805      	ldr	r0, [pc, #20]	; (80095d0 <MX_USB_Device_Init+0x54>)
 80095ba:	f7fe ff16 	bl	80083ea <USBD_Start>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80095c4:	f7f7 fb02 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80095c8:	bf00      	nop
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20000130 	.word	0x20000130
 80095d0:	200003c8 	.word	0x200003c8
 80095d4:	20000018 	.word	0x20000018
 80095d8:	2000011c 	.word	0x2000011c

080095dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095e0:	2200      	movs	r2, #0
 80095e2:	4905      	ldr	r1, [pc, #20]	; (80095f8 <CDC_Init_FS+0x1c>)
 80095e4:	4805      	ldr	r0, [pc, #20]	; (80095fc <CDC_Init_FS+0x20>)
 80095e6:	f7fe fe18 	bl	800821a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095ea:	4905      	ldr	r1, [pc, #20]	; (8009600 <CDC_Init_FS+0x24>)
 80095ec:	4803      	ldr	r0, [pc, #12]	; (80095fc <CDC_Init_FS+0x20>)
 80095ee:	f7fe fe32 	bl	8008256 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000718 	.word	0x20000718
 80095fc:	200003c8 	.word	0x200003c8
 8009600:	20000698 	.word	0x20000698

08009604 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009608:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800960a:	4618      	mov	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
 8009620:	4613      	mov	r3, r2
 8009622:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	2b23      	cmp	r3, #35	; 0x23
 8009628:	d84a      	bhi.n	80096c0 <CDC_Control_FS+0xac>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <CDC_Control_FS+0x1c>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	080096c1 	.word	0x080096c1
 8009634:	080096c1 	.word	0x080096c1
 8009638:	080096c1 	.word	0x080096c1
 800963c:	080096c1 	.word	0x080096c1
 8009640:	080096c1 	.word	0x080096c1
 8009644:	080096c1 	.word	0x080096c1
 8009648:	080096c1 	.word	0x080096c1
 800964c:	080096c1 	.word	0x080096c1
 8009650:	080096c1 	.word	0x080096c1
 8009654:	080096c1 	.word	0x080096c1
 8009658:	080096c1 	.word	0x080096c1
 800965c:	080096c1 	.word	0x080096c1
 8009660:	080096c1 	.word	0x080096c1
 8009664:	080096c1 	.word	0x080096c1
 8009668:	080096c1 	.word	0x080096c1
 800966c:	080096c1 	.word	0x080096c1
 8009670:	080096c1 	.word	0x080096c1
 8009674:	080096c1 	.word	0x080096c1
 8009678:	080096c1 	.word	0x080096c1
 800967c:	080096c1 	.word	0x080096c1
 8009680:	080096c1 	.word	0x080096c1
 8009684:	080096c1 	.word	0x080096c1
 8009688:	080096c1 	.word	0x080096c1
 800968c:	080096c1 	.word	0x080096c1
 8009690:	080096c1 	.word	0x080096c1
 8009694:	080096c1 	.word	0x080096c1
 8009698:	080096c1 	.word	0x080096c1
 800969c:	080096c1 	.word	0x080096c1
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c1 	.word	0x080096c1
 80096a8:	080096c1 	.word	0x080096c1
 80096ac:	080096c1 	.word	0x080096c1
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096c1 	.word	0x080096c1
 80096b8:	080096c1 	.word	0x080096c1
 80096bc:	080096c1 	.word	0x080096c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096c0:	bf00      	nop
  }

  return (USBD_OK);
 80096c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4812      	ldr	r0, [pc, #72]	; (8009728 <CDC_Receive_FS+0x58>)
 80096de:	f7fe fdba 	bl	8008256 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096e2:	4811      	ldr	r0, [pc, #68]	; (8009728 <CDC_Receive_FS+0x58>)
 80096e4:	f7fe fe00 	bl	80082e8 <USBD_CDC_ReceivePacket>

  usb_rx_size = (uint16_t) *Len;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <CDC_Receive_FS+0x5c>)
 80096f0:	801a      	strh	r2, [r3, #0]

  // clear the receive buffer
  memset(usb_rx_buffer, 0, USB_BUFFER_SIZE);
 80096f2:	2280      	movs	r2, #128	; 0x80
 80096f4:	2100      	movs	r1, #0
 80096f6:	480e      	ldr	r0, [pc, #56]	; (8009730 <CDC_Receive_FS+0x60>)
 80096f8:	f000 fc6a 	bl	8009fd0 <memset>

  // copy the received data to the receive buffer
  memcpy(usb_rx_buffer, Buf, usb_rx_size);
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <CDC_Receive_FS+0x5c>)
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	480a      	ldr	r0, [pc, #40]	; (8009730 <CDC_Receive_FS+0x60>)
 8009706:	f000 fc8f 	bl	800a028 <memcpy>

  // clear the original buffer
  memset(Buf, 0, usb_rx_size);
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <CDC_Receive_FS+0x5c>)
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fc5c 	bl	8009fd0 <memset>

  APP_handleUSBMessage();
 8009718:	f7f6 ff08 	bl	800052c <APP_handleUSBMessage>

  return (USBD_OK);
 800971c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	200003c8 	.word	0x200003c8
 800972c:	200001a0 	.word	0x200001a0
 8009730:	200001a4 	.word	0x200001a4

08009734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009744:	4b0d      	ldr	r3, [pc, #52]	; (800977c <CDC_Transmit_FS+0x48>)
 8009746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800974a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009756:	2301      	movs	r3, #1
 8009758:	e00b      	b.n	8009772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800975a:	887b      	ldrh	r3, [r7, #2]
 800975c:	461a      	mov	r2, r3
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	4806      	ldr	r0, [pc, #24]	; (800977c <CDC_Transmit_FS+0x48>)
 8009762:	f7fe fd5a 	bl	800821a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009766:	4805      	ldr	r0, [pc, #20]	; (800977c <CDC_Transmit_FS+0x48>)
 8009768:	f7fe fd8e 	bl	8008288 <USBD_CDC_TransmitPacket>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200003c8 	.word	0x200003c8

08009780 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
	...

080097a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2212      	movs	r2, #18
 80097b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80097b6:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	20000150 	.word	0x20000150

080097c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2204      	movs	r2, #4
 80097d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097da:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000164 	.word	0x20000164

080097ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	6039      	str	r1, [r7, #0]
 80097f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d105      	bne.n	800980a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	4907      	ldr	r1, [pc, #28]	; (8009820 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009802:	4808      	ldr	r0, [pc, #32]	; (8009824 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009804:	f7ff fdd9 	bl	80093ba <USBD_GetString>
 8009808:	e004      	b.n	8009814 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4904      	ldr	r1, [pc, #16]	; (8009820 <USBD_CDC_ProductStrDescriptor+0x34>)
 800980e:	4805      	ldr	r0, [pc, #20]	; (8009824 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009810:	f7ff fdd3 	bl	80093ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009814:	4b02      	ldr	r3, [pc, #8]	; (8009820 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000798 	.word	0x20000798
 8009824:	0800a05c 	.word	0x0800a05c

08009828 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4904      	ldr	r1, [pc, #16]	; (8009848 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009838:	4804      	ldr	r0, [pc, #16]	; (800984c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800983a:	f7ff fdbe 	bl	80093ba <USBD_GetString>
  return USBD_StrDesc;
 800983e:	4b02      	ldr	r3, [pc, #8]	; (8009848 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000798 	.word	0x20000798
 800984c:	0800a074 	.word	0x0800a074

08009850 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	221a      	movs	r2, #26
 8009860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009862:	f000 f843 	bl	80098ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009866:	4b02      	ldr	r3, [pc, #8]	; (8009870 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000168 	.word	0x20000168

08009874 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d105      	bne.n	8009892 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	4907      	ldr	r1, [pc, #28]	; (80098a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800988a:	4808      	ldr	r0, [pc, #32]	; (80098ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800988c:	f7ff fd95 	bl	80093ba <USBD_GetString>
 8009890:	e004      	b.n	800989c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4904      	ldr	r1, [pc, #16]	; (80098a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009896:	4805      	ldr	r0, [pc, #20]	; (80098ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009898:	f7ff fd8f 	bl	80093ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000798 	.word	0x20000798
 80098ac:	0800a084 	.word	0x0800a084

080098b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4907      	ldr	r1, [pc, #28]	; (80098e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098c6:	4808      	ldr	r0, [pc, #32]	; (80098e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098c8:	f7ff fd77 	bl	80093ba <USBD_GetString>
 80098cc:	e004      	b.n	80098d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4904      	ldr	r1, [pc, #16]	; (80098e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098d2:	4805      	ldr	r0, [pc, #20]	; (80098e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098d4:	f7ff fd71 	bl	80093ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000798 	.word	0x20000798
 80098e8:	0800a090 	.word	0x0800a090

080098ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098f2:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <Get_SerialNum+0x44>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098f8:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <Get_SerialNum+0x48>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098fe:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <Get_SerialNum+0x4c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4413      	add	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009912:	2208      	movs	r2, #8
 8009914:	4909      	ldr	r1, [pc, #36]	; (800993c <Get_SerialNum+0x50>)
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 f814 	bl	8009944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800991c:	2204      	movs	r2, #4
 800991e:	4908      	ldr	r1, [pc, #32]	; (8009940 <Get_SerialNum+0x54>)
 8009920:	68b8      	ldr	r0, [r7, #8]
 8009922:	f000 f80f 	bl	8009944 <IntToUnicode>
  }
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	1fff7590 	.word	0x1fff7590
 8009934:	1fff7594 	.word	0x1fff7594
 8009938:	1fff7598 	.word	0x1fff7598
 800993c:	2000016a 	.word	0x2000016a
 8009940:	2000017a 	.word	0x2000017a

08009944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]
 800995a:	e027      	b.n	80099ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	0f1b      	lsrs	r3, r3, #28
 8009960:	2b09      	cmp	r3, #9
 8009962:	d80b      	bhi.n	800997c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	0f1b      	lsrs	r3, r3, #28
 8009968:	b2da      	uxtb	r2, r3
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	4619      	mov	r1, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	440b      	add	r3, r1
 8009974:	3230      	adds	r2, #48	; 0x30
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	e00a      	b.n	8009992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	0f1b      	lsrs	r3, r3, #28
 8009980:	b2da      	uxtb	r2, r3
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	4619      	mov	r1, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	440b      	add	r3, r1
 800998c:	3237      	adds	r2, #55	; 0x37
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	3301      	adds	r3, #1
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	4413      	add	r3, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	3301      	adds	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
 80099ac:	7dfa      	ldrb	r2, [r7, #23]
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d3d3      	bcc.n	800995c <IntToUnicode+0x18>
  }
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
	...

080099c4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b094      	sub	sp, #80	; 0x50
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099cc:	f107 030c 	add.w	r3, r7, #12
 80099d0:	2244      	movs	r2, #68	; 0x44
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fafb 	bl	8009fd0 <memset>
  if(pcdHandle->Instance==USB)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a15      	ldr	r2, [pc, #84]	; (8009a34 <HAL_PCD_MspInit+0x70>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d123      	bne.n	8009a2c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80099e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80099ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099ee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099f0:	f107 030c 	add.w	r3, r7, #12
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fa fee5 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009a00:	f7f7 f8e4 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a04:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <HAL_PCD_MspInit+0x74>)
 8009a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a08:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <HAL_PCD_MspInit+0x74>)
 8009a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8009a10:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <HAL_PCD_MspInit+0x74>)
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	2014      	movs	r0, #20
 8009a22:	f7f7 fba0 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009a26:	2014      	movs	r0, #20
 8009a28:	f7f7 fbb7 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	3750      	adds	r7, #80	; 0x50
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40005c00 	.word	0x40005c00
 8009a38:	40021000 	.word	0x40021000

08009a3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7fe fd14 	bl	8008480 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	440b      	add	r3, r1
 8009a80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7fe fd4e 	bl	800852a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	440b      	add	r3, r1
 8009ab6:	333c      	adds	r3, #60	; 0x3c
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	4619      	mov	r1, r3
 8009abe:	f7fe fd97 	bl	80085f0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe feab 	bl	8008834 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009ade:	bf00      	nop
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aee:	2301      	movs	r3, #1
 8009af0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d001      	beq.n	8009afe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009afa:	f7f7 f867 	bl	8000bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b04:	7bfa      	ldrb	r2, [r7, #15]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fe55 	bl	80087b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fe01 	bl	800871c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fe50 	bl	80087d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b40:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <HAL_PCD_SuspendCallback+0x30>)
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	4a03      	ldr	r2, [pc, #12]	; (8009b54 <HAL_PCD_SuspendCallback+0x30>)
 8009b46:	f043 0306 	orr.w	r3, r3, #6
 8009b4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b68:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <HAL_PCD_ResumeCallback+0x34>)
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	4a07      	ldr	r2, [pc, #28]	; (8009b8c <HAL_PCD_ResumeCallback+0x34>)
 8009b6e:	f023 0306 	bic.w	r3, r3, #6
 8009b72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009b74:	f000 f9fa 	bl	8009f6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fe40 	bl	8008804 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	e000ed00 	.word	0xe000ed00

08009b90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009b98:	4a2b      	ldr	r2, [pc, #172]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a29      	ldr	r2, [pc, #164]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009ba4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009ba8:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009baa:	4a28      	ldr	r2, [pc, #160]	; (8009c4c <USBD_LL_Init+0xbc>)
 8009bac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bae:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bb0:	2208      	movs	r2, #8
 8009bb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bb4:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bba:	4b23      	ldr	r3, [pc, #140]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009bc0:	4b21      	ldr	r3, [pc, #132]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bc6:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bcc:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bd2:	4b1d      	ldr	r3, [pc, #116]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bd8:	481b      	ldr	r0, [pc, #108]	; (8009c48 <USBD_LL_Init+0xb8>)
 8009bda:	f7f8 fae7 	bl	80021ac <HAL_PCD_Init>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009be4:	f7f6 fff2 	bl	8000bcc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bee:	2318      	movs	r3, #24
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	f7f9 ffa0 	bl	8003b38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bfe:	2358      	movs	r3, #88	; 0x58
 8009c00:	2200      	movs	r2, #0
 8009c02:	2180      	movs	r1, #128	; 0x80
 8009c04:	f7f9 ff98 	bl	8003b38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c0e:	23c0      	movs	r3, #192	; 0xc0
 8009c10:	2200      	movs	r2, #0
 8009c12:	2181      	movs	r1, #129	; 0x81
 8009c14:	f7f9 ff90 	bl	8003b38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c22:	2200      	movs	r2, #0
 8009c24:	2101      	movs	r1, #1
 8009c26:	f7f9 ff87 	bl	8003b38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c34:	2200      	movs	r2, #0
 8009c36:	2182      	movs	r1, #130	; 0x82
 8009c38:	f7f9 ff7e 	bl	8003b38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000998 	.word	0x20000998
 8009c4c:	40005c00 	.word	0x40005c00

08009c50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f8 fb85 	bl	8002376 <HAL_PCD_Start>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f980 	bl	8009f78 <USBD_Get_USB_Status>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	461a      	mov	r2, r3
 8009c94:	4603      	mov	r3, r0
 8009c96:	70fb      	strb	r3, [r7, #3]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70bb      	strb	r3, [r7, #2]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cae:	78bb      	ldrb	r3, [r7, #2]
 8009cb0:	883a      	ldrh	r2, [r7, #0]
 8009cb2:	78f9      	ldrb	r1, [r7, #3]
 8009cb4:	f7f8 fccd 	bl	8002652 <HAL_PCD_EP_Open>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 f95a 	bl	8009f78 <USBD_Get_USB_Status>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f8 fd14 	bl	800271e <HAL_PCD_EP_Close>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 f93b 	bl	8009f78 <USBD_Get_USB_Status>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7f8 fdd5 	bl	80028de <HAL_PCD_EP_SetStall>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f91c 	bl	8009f78 <USBD_Get_USB_Status>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7f8 fe08 	bl	8002982 <HAL_PCD_EP_ClrStall>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f8fd 	bl	8009f78 <USBD_Get_USB_Status>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da0c      	bge.n	8009dc2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	440b      	add	r3, r1
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	e00b      	b.n	8009dda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dc8:	68f9      	ldr	r1, [r7, #12]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009dd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f8 fbff 	bl	8002608 <HAL_PCD_SetAddress>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 f8b1 	bl	8009f78 <USBD_Get_USB_Status>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	607a      	str	r2, [r7, #4]
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	460b      	mov	r3, r1
 8009e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e42:	7af9      	ldrb	r1, [r7, #11]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	f7f8 fd06 	bl	8002858 <HAL_PCD_EP_Transmit>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f890 	bl	8009f78 <USBD_Get_USB_Status>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b086      	sub	sp, #24
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
 8009e72:	460b      	mov	r3, r1
 8009e74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e84:	7af9      	ldrb	r1, [r7, #11]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	f7f8 fc90 	bl	80027ae <HAL_PCD_EP_Receive>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 f86f 	bl	8009f78 <USBD_Get_USB_Status>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eba:	78fa      	ldrb	r2, [r7, #3]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7f8 fcb2 	bl	8002828 <HAL_PCD_EP_GetRxCount>
 8009ec4:	4603      	mov	r3, r0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <HAL_PCDEx_LPM_Callback+0x18>
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d013      	beq.n	8009f0e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009ee6:	e023      	b.n	8009f30 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009ef0:	f000 f83c 	bl	8009f6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	4a0f      	ldr	r2, [pc, #60]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x68>)
 8009efa:	f023 0306 	bic.w	r3, r3, #6
 8009efe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fc7c 	bl	8008804 <USBD_LL_Resume>
    break;
 8009f0c:	e010      	b.n	8009f30 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fc5f 	bl	80087d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f28:	f043 0306 	orr.w	r3, r3, #6
 8009f2c:	6113      	str	r3, [r2, #16]
    break;
 8009f2e:	bf00      	nop
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed00 	.word	0xe000ed00

08009f3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f44:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <USBD_static_malloc+0x18>)
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000c8c 	.word	0x20000c8c

08009f58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f70:	f7f6 fd05 	bl	800097e <SystemClock_Config>
}
 8009f74:	bf00      	nop
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d817      	bhi.n	8009fbc <USBD_Get_USB_Status+0x44>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBD_Get_USB_Status+0x1c>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fa5 	.word	0x08009fa5
 8009f98:	08009fab 	.word	0x08009fab
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fb7 	.word	0x08009fb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	e00b      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009faa:	2303      	movs	r3, #3
 8009fac:	73fb      	strb	r3, [r7, #15]
    break;
 8009fae:	e008      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e005      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e002      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	bf00      	nop
  }
  return usb_status;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <memset>:
 8009fd0:	4402      	add	r2, r0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d100      	bne.n	8009fda <memset+0xa>
 8009fd8:	4770      	bx	lr
 8009fda:	f803 1b01 	strb.w	r1, [r3], #1
 8009fde:	e7f9      	b.n	8009fd4 <memset+0x4>

08009fe0 <__libc_init_array>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	4d0d      	ldr	r5, [pc, #52]	; (800a018 <__libc_init_array+0x38>)
 8009fe4:	4c0d      	ldr	r4, [pc, #52]	; (800a01c <__libc_init_array+0x3c>)
 8009fe6:	1b64      	subs	r4, r4, r5
 8009fe8:	10a4      	asrs	r4, r4, #2
 8009fea:	2600      	movs	r6, #0
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	d109      	bne.n	800a004 <__libc_init_array+0x24>
 8009ff0:	4d0b      	ldr	r5, [pc, #44]	; (800a020 <__libc_init_array+0x40>)
 8009ff2:	4c0c      	ldr	r4, [pc, #48]	; (800a024 <__libc_init_array+0x44>)
 8009ff4:	f000 f826 	bl	800a044 <_init>
 8009ff8:	1b64      	subs	r4, r4, r5
 8009ffa:	10a4      	asrs	r4, r4, #2
 8009ffc:	2600      	movs	r6, #0
 8009ffe:	42a6      	cmp	r6, r4
 800a000:	d105      	bne.n	800a00e <__libc_init_array+0x2e>
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	f855 3b04 	ldr.w	r3, [r5], #4
 800a008:	4798      	blx	r3
 800a00a:	3601      	adds	r6, #1
 800a00c:	e7ee      	b.n	8009fec <__libc_init_array+0xc>
 800a00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a012:	4798      	blx	r3
 800a014:	3601      	adds	r6, #1
 800a016:	e7f2      	b.n	8009ffe <__libc_init_array+0x1e>
 800a018:	0800a0f8 	.word	0x0800a0f8
 800a01c:	0800a0f8 	.word	0x0800a0f8
 800a020:	0800a0f8 	.word	0x0800a0f8
 800a024:	0800a0fc 	.word	0x0800a0fc

0800a028 <memcpy>:
 800a028:	440a      	add	r2, r1
 800a02a:	4291      	cmp	r1, r2
 800a02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a030:	d100      	bne.n	800a034 <memcpy+0xc>
 800a032:	4770      	bx	lr
 800a034:	b510      	push	{r4, lr}
 800a036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a03e:	4291      	cmp	r1, r2
 800a040:	d1f9      	bne.n	800a036 <memcpy+0xe>
 800a042:	bd10      	pop	{r4, pc}

0800a044 <_init>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr

0800a050 <_fini>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr
